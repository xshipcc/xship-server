// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pms.proto

package pmsclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	ProductAdd(ctx context.Context, in *ProductAddReq, opts ...grpc.CallOption) (*ProductAddResp, error)
	ProductList(ctx context.Context, in *ProductListReq, opts ...grpc.CallOption) (*ProductListResp, error)
	ProductListByIds(ctx context.Context, in *ProductByIdsReq, opts ...grpc.CallOption) (*ProductListResp, error)
	ProductUpdate(ctx context.Context, in *ProductUpdateReq, opts ...grpc.CallOption) (*ProductUpdateResp, error)
	ProductDelete(ctx context.Context, in *ProductDeleteReq, opts ...grpc.CallOption) (*ProductDeleteResp, error)
	ProductDetailById(ctx context.Context, in *ProductDetailByIdReq, opts ...grpc.CallOption) (*ProductDetailByIdResp, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) ProductAdd(ctx context.Context, in *ProductAddReq, opts ...grpc.CallOption) (*ProductAddResp, error) {
	out := new(ProductAddResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductService/ProductAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ProductList(ctx context.Context, in *ProductListReq, opts ...grpc.CallOption) (*ProductListResp, error) {
	out := new(ProductListResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductService/ProductList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ProductListByIds(ctx context.Context, in *ProductByIdsReq, opts ...grpc.CallOption) (*ProductListResp, error) {
	out := new(ProductListResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductService/ProductListByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ProductUpdate(ctx context.Context, in *ProductUpdateReq, opts ...grpc.CallOption) (*ProductUpdateResp, error) {
	out := new(ProductUpdateResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductService/ProductUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ProductDelete(ctx context.Context, in *ProductDeleteReq, opts ...grpc.CallOption) (*ProductDeleteResp, error) {
	out := new(ProductDeleteResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductService/ProductDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ProductDetailById(ctx context.Context, in *ProductDetailByIdReq, opts ...grpc.CallOption) (*ProductDetailByIdResp, error) {
	out := new(ProductDetailByIdResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductService/ProductDetailById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility
type ProductServiceServer interface {
	ProductAdd(context.Context, *ProductAddReq) (*ProductAddResp, error)
	ProductList(context.Context, *ProductListReq) (*ProductListResp, error)
	ProductListByIds(context.Context, *ProductByIdsReq) (*ProductListResp, error)
	ProductUpdate(context.Context, *ProductUpdateReq) (*ProductUpdateResp, error)
	ProductDelete(context.Context, *ProductDeleteReq) (*ProductDeleteResp, error)
	ProductDetailById(context.Context, *ProductDetailByIdReq) (*ProductDetailByIdResp, error)
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductServiceServer struct {
}

func (UnimplementedProductServiceServer) ProductAdd(context.Context, *ProductAddReq) (*ProductAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAdd not implemented")
}
func (UnimplementedProductServiceServer) ProductList(context.Context, *ProductListReq) (*ProductListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductList not implemented")
}
func (UnimplementedProductServiceServer) ProductListByIds(context.Context, *ProductByIdsReq) (*ProductListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductListByIds not implemented")
}
func (UnimplementedProductServiceServer) ProductUpdate(context.Context, *ProductUpdateReq) (*ProductUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductUpdate not implemented")
}
func (UnimplementedProductServiceServer) ProductDelete(context.Context, *ProductDeleteReq) (*ProductDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductDelete not implemented")
}
func (UnimplementedProductServiceServer) ProductDetailById(context.Context, *ProductDetailByIdReq) (*ProductDetailByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductDetailById not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_ProductAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ProductAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductService/ProductAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ProductAdd(ctx, req.(*ProductAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductService/ProductList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ProductList(ctx, req.(*ProductListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ProductListByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ProductListByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductService/ProductListByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ProductListByIds(ctx, req.(*ProductByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ProductUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ProductUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductService/ProductUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ProductUpdate(ctx, req.(*ProductUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ProductDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ProductDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductService/ProductDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ProductDelete(ctx, req.(*ProductDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ProductDetailById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductDetailByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ProductDetailById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductService/ProductDetailById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ProductDetailById(ctx, req.(*ProductDetailByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProductAdd",
			Handler:    _ProductService_ProductAdd_Handler,
		},
		{
			MethodName: "ProductList",
			Handler:    _ProductService_ProductList_Handler,
		},
		{
			MethodName: "ProductListByIds",
			Handler:    _ProductService_ProductListByIds_Handler,
		},
		{
			MethodName: "ProductUpdate",
			Handler:    _ProductService_ProductUpdate_Handler,
		},
		{
			MethodName: "ProductDelete",
			Handler:    _ProductService_ProductDelete_Handler,
		},
		{
			MethodName: "ProductDetailById",
			Handler:    _ProductService_ProductDetailById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pms.proto",
}

// AlbumServiceClient is the client API for AlbumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlbumServiceClient interface {
	AlbumAdd(ctx context.Context, in *AlbumAddReq, opts ...grpc.CallOption) (*AlbumAddResp, error)
	AlbumList(ctx context.Context, in *AlbumListReq, opts ...grpc.CallOption) (*AlbumListResp, error)
	AlbumUpdate(ctx context.Context, in *AlbumUpdateReq, opts ...grpc.CallOption) (*AlbumUpdateResp, error)
	AlbumDelete(ctx context.Context, in *AlbumDeleteReq, opts ...grpc.CallOption) (*AlbumDeleteResp, error)
}

type albumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlbumServiceClient(cc grpc.ClientConnInterface) AlbumServiceClient {
	return &albumServiceClient{cc}
}

func (c *albumServiceClient) AlbumAdd(ctx context.Context, in *AlbumAddReq, opts ...grpc.CallOption) (*AlbumAddResp, error) {
	out := new(AlbumAddResp)
	err := c.cc.Invoke(ctx, "/pmsclient.AlbumService/AlbumAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) AlbumList(ctx context.Context, in *AlbumListReq, opts ...grpc.CallOption) (*AlbumListResp, error) {
	out := new(AlbumListResp)
	err := c.cc.Invoke(ctx, "/pmsclient.AlbumService/AlbumList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) AlbumUpdate(ctx context.Context, in *AlbumUpdateReq, opts ...grpc.CallOption) (*AlbumUpdateResp, error) {
	out := new(AlbumUpdateResp)
	err := c.cc.Invoke(ctx, "/pmsclient.AlbumService/AlbumUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) AlbumDelete(ctx context.Context, in *AlbumDeleteReq, opts ...grpc.CallOption) (*AlbumDeleteResp, error) {
	out := new(AlbumDeleteResp)
	err := c.cc.Invoke(ctx, "/pmsclient.AlbumService/AlbumDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlbumServiceServer is the server API for AlbumService service.
// All implementations must embed UnimplementedAlbumServiceServer
// for forward compatibility
type AlbumServiceServer interface {
	AlbumAdd(context.Context, *AlbumAddReq) (*AlbumAddResp, error)
	AlbumList(context.Context, *AlbumListReq) (*AlbumListResp, error)
	AlbumUpdate(context.Context, *AlbumUpdateReq) (*AlbumUpdateResp, error)
	AlbumDelete(context.Context, *AlbumDeleteReq) (*AlbumDeleteResp, error)
	mustEmbedUnimplementedAlbumServiceServer()
}

// UnimplementedAlbumServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAlbumServiceServer struct {
}

func (UnimplementedAlbumServiceServer) AlbumAdd(context.Context, *AlbumAddReq) (*AlbumAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlbumAdd not implemented")
}
func (UnimplementedAlbumServiceServer) AlbumList(context.Context, *AlbumListReq) (*AlbumListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlbumList not implemented")
}
func (UnimplementedAlbumServiceServer) AlbumUpdate(context.Context, *AlbumUpdateReq) (*AlbumUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlbumUpdate not implemented")
}
func (UnimplementedAlbumServiceServer) AlbumDelete(context.Context, *AlbumDeleteReq) (*AlbumDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlbumDelete not implemented")
}
func (UnimplementedAlbumServiceServer) mustEmbedUnimplementedAlbumServiceServer() {}

// UnsafeAlbumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlbumServiceServer will
// result in compilation errors.
type UnsafeAlbumServiceServer interface {
	mustEmbedUnimplementedAlbumServiceServer()
}

func RegisterAlbumServiceServer(s grpc.ServiceRegistrar, srv AlbumServiceServer) {
	s.RegisterService(&AlbumService_ServiceDesc, srv)
}

func _AlbumService_AlbumAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).AlbumAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.AlbumService/AlbumAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).AlbumAdd(ctx, req.(*AlbumAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_AlbumList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).AlbumList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.AlbumService/AlbumList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).AlbumList(ctx, req.(*AlbumListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_AlbumUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).AlbumUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.AlbumService/AlbumUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).AlbumUpdate(ctx, req.(*AlbumUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_AlbumDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).AlbumDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.AlbumService/AlbumDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).AlbumDelete(ctx, req.(*AlbumDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AlbumService_ServiceDesc is the grpc.ServiceDesc for AlbumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlbumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.AlbumService",
	HandlerType: (*AlbumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AlbumAdd",
			Handler:    _AlbumService_AlbumAdd_Handler,
		},
		{
			MethodName: "AlbumList",
			Handler:    _AlbumService_AlbumList_Handler,
		},
		{
			MethodName: "AlbumUpdate",
			Handler:    _AlbumService_AlbumUpdate_Handler,
		},
		{
			MethodName: "AlbumDelete",
			Handler:    _AlbumService_AlbumDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pms.proto",
}

// AlbumPicServiceClient is the client API for AlbumPicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlbumPicServiceClient interface {
	AlbumPicAdd(ctx context.Context, in *AlbumPicAddReq, opts ...grpc.CallOption) (*AlbumPicAddResp, error)
	AlbumPicList(ctx context.Context, in *AlbumPicListReq, opts ...grpc.CallOption) (*AlbumPicListResp, error)
	AlbumPicUpdate(ctx context.Context, in *AlbumPicUpdateReq, opts ...grpc.CallOption) (*AlbumPicUpdateResp, error)
	AlbumPicDelete(ctx context.Context, in *AlbumPicDeleteReq, opts ...grpc.CallOption) (*AlbumPicDeleteResp, error)
}

type albumPicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlbumPicServiceClient(cc grpc.ClientConnInterface) AlbumPicServiceClient {
	return &albumPicServiceClient{cc}
}

func (c *albumPicServiceClient) AlbumPicAdd(ctx context.Context, in *AlbumPicAddReq, opts ...grpc.CallOption) (*AlbumPicAddResp, error) {
	out := new(AlbumPicAddResp)
	err := c.cc.Invoke(ctx, "/pmsclient.AlbumPicService/AlbumPicAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumPicServiceClient) AlbumPicList(ctx context.Context, in *AlbumPicListReq, opts ...grpc.CallOption) (*AlbumPicListResp, error) {
	out := new(AlbumPicListResp)
	err := c.cc.Invoke(ctx, "/pmsclient.AlbumPicService/AlbumPicList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumPicServiceClient) AlbumPicUpdate(ctx context.Context, in *AlbumPicUpdateReq, opts ...grpc.CallOption) (*AlbumPicUpdateResp, error) {
	out := new(AlbumPicUpdateResp)
	err := c.cc.Invoke(ctx, "/pmsclient.AlbumPicService/AlbumPicUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumPicServiceClient) AlbumPicDelete(ctx context.Context, in *AlbumPicDeleteReq, opts ...grpc.CallOption) (*AlbumPicDeleteResp, error) {
	out := new(AlbumPicDeleteResp)
	err := c.cc.Invoke(ctx, "/pmsclient.AlbumPicService/AlbumPicDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlbumPicServiceServer is the server API for AlbumPicService service.
// All implementations must embed UnimplementedAlbumPicServiceServer
// for forward compatibility
type AlbumPicServiceServer interface {
	AlbumPicAdd(context.Context, *AlbumPicAddReq) (*AlbumPicAddResp, error)
	AlbumPicList(context.Context, *AlbumPicListReq) (*AlbumPicListResp, error)
	AlbumPicUpdate(context.Context, *AlbumPicUpdateReq) (*AlbumPicUpdateResp, error)
	AlbumPicDelete(context.Context, *AlbumPicDeleteReq) (*AlbumPicDeleteResp, error)
	mustEmbedUnimplementedAlbumPicServiceServer()
}

// UnimplementedAlbumPicServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAlbumPicServiceServer struct {
}

func (UnimplementedAlbumPicServiceServer) AlbumPicAdd(context.Context, *AlbumPicAddReq) (*AlbumPicAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlbumPicAdd not implemented")
}
func (UnimplementedAlbumPicServiceServer) AlbumPicList(context.Context, *AlbumPicListReq) (*AlbumPicListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlbumPicList not implemented")
}
func (UnimplementedAlbumPicServiceServer) AlbumPicUpdate(context.Context, *AlbumPicUpdateReq) (*AlbumPicUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlbumPicUpdate not implemented")
}
func (UnimplementedAlbumPicServiceServer) AlbumPicDelete(context.Context, *AlbumPicDeleteReq) (*AlbumPicDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlbumPicDelete not implemented")
}
func (UnimplementedAlbumPicServiceServer) mustEmbedUnimplementedAlbumPicServiceServer() {}

// UnsafeAlbumPicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlbumPicServiceServer will
// result in compilation errors.
type UnsafeAlbumPicServiceServer interface {
	mustEmbedUnimplementedAlbumPicServiceServer()
}

func RegisterAlbumPicServiceServer(s grpc.ServiceRegistrar, srv AlbumPicServiceServer) {
	s.RegisterService(&AlbumPicService_ServiceDesc, srv)
}

func _AlbumPicService_AlbumPicAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumPicAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumPicServiceServer).AlbumPicAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.AlbumPicService/AlbumPicAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumPicServiceServer).AlbumPicAdd(ctx, req.(*AlbumPicAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumPicService_AlbumPicList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumPicListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumPicServiceServer).AlbumPicList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.AlbumPicService/AlbumPicList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumPicServiceServer).AlbumPicList(ctx, req.(*AlbumPicListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumPicService_AlbumPicUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumPicUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumPicServiceServer).AlbumPicUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.AlbumPicService/AlbumPicUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumPicServiceServer).AlbumPicUpdate(ctx, req.(*AlbumPicUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumPicService_AlbumPicDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumPicDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumPicServiceServer).AlbumPicDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.AlbumPicService/AlbumPicDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumPicServiceServer).AlbumPicDelete(ctx, req.(*AlbumPicDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AlbumPicService_ServiceDesc is the grpc.ServiceDesc for AlbumPicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlbumPicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.AlbumPicService",
	HandlerType: (*AlbumPicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AlbumPicAdd",
			Handler:    _AlbumPicService_AlbumPicAdd_Handler,
		},
		{
			MethodName: "AlbumPicList",
			Handler:    _AlbumPicService_AlbumPicList_Handler,
		},
		{
			MethodName: "AlbumPicUpdate",
			Handler:    _AlbumPicService_AlbumPicUpdate_Handler,
		},
		{
			MethodName: "AlbumPicDelete",
			Handler:    _AlbumPicService_AlbumPicDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pms.proto",
}

// BrandServiceClient is the client API for BrandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrandServiceClient interface {
	BrandAdd(ctx context.Context, in *BrandAddReq, opts ...grpc.CallOption) (*BrandAddResp, error)
	BrandList(ctx context.Context, in *BrandListReq, opts ...grpc.CallOption) (*BrandListResp, error)
	BrandListByIds(ctx context.Context, in *BrandListByIdsReq, opts ...grpc.CallOption) (*BrandListResp, error)
	BrandUpdate(ctx context.Context, in *BrandUpdateReq, opts ...grpc.CallOption) (*BrandUpdateResp, error)
	BrandDelete(ctx context.Context, in *BrandDeleteReq, opts ...grpc.CallOption) (*BrandDeleteResp, error)
}

type brandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBrandServiceClient(cc grpc.ClientConnInterface) BrandServiceClient {
	return &brandServiceClient{cc}
}

func (c *brandServiceClient) BrandAdd(ctx context.Context, in *BrandAddReq, opts ...grpc.CallOption) (*BrandAddResp, error) {
	out := new(BrandAddResp)
	err := c.cc.Invoke(ctx, "/pmsclient.BrandService/BrandAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandServiceClient) BrandList(ctx context.Context, in *BrandListReq, opts ...grpc.CallOption) (*BrandListResp, error) {
	out := new(BrandListResp)
	err := c.cc.Invoke(ctx, "/pmsclient.BrandService/BrandList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandServiceClient) BrandListByIds(ctx context.Context, in *BrandListByIdsReq, opts ...grpc.CallOption) (*BrandListResp, error) {
	out := new(BrandListResp)
	err := c.cc.Invoke(ctx, "/pmsclient.BrandService/BrandListByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandServiceClient) BrandUpdate(ctx context.Context, in *BrandUpdateReq, opts ...grpc.CallOption) (*BrandUpdateResp, error) {
	out := new(BrandUpdateResp)
	err := c.cc.Invoke(ctx, "/pmsclient.BrandService/BrandUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandServiceClient) BrandDelete(ctx context.Context, in *BrandDeleteReq, opts ...grpc.CallOption) (*BrandDeleteResp, error) {
	out := new(BrandDeleteResp)
	err := c.cc.Invoke(ctx, "/pmsclient.BrandService/BrandDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrandServiceServer is the server API for BrandService service.
// All implementations must embed UnimplementedBrandServiceServer
// for forward compatibility
type BrandServiceServer interface {
	BrandAdd(context.Context, *BrandAddReq) (*BrandAddResp, error)
	BrandList(context.Context, *BrandListReq) (*BrandListResp, error)
	BrandListByIds(context.Context, *BrandListByIdsReq) (*BrandListResp, error)
	BrandUpdate(context.Context, *BrandUpdateReq) (*BrandUpdateResp, error)
	BrandDelete(context.Context, *BrandDeleteReq) (*BrandDeleteResp, error)
	mustEmbedUnimplementedBrandServiceServer()
}

// UnimplementedBrandServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBrandServiceServer struct {
}

func (UnimplementedBrandServiceServer) BrandAdd(context.Context, *BrandAddReq) (*BrandAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrandAdd not implemented")
}
func (UnimplementedBrandServiceServer) BrandList(context.Context, *BrandListReq) (*BrandListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrandList not implemented")
}
func (UnimplementedBrandServiceServer) BrandListByIds(context.Context, *BrandListByIdsReq) (*BrandListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrandListByIds not implemented")
}
func (UnimplementedBrandServiceServer) BrandUpdate(context.Context, *BrandUpdateReq) (*BrandUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrandUpdate not implemented")
}
func (UnimplementedBrandServiceServer) BrandDelete(context.Context, *BrandDeleteReq) (*BrandDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrandDelete not implemented")
}
func (UnimplementedBrandServiceServer) mustEmbedUnimplementedBrandServiceServer() {}

// UnsafeBrandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrandServiceServer will
// result in compilation errors.
type UnsafeBrandServiceServer interface {
	mustEmbedUnimplementedBrandServiceServer()
}

func RegisterBrandServiceServer(s grpc.ServiceRegistrar, srv BrandServiceServer) {
	s.RegisterService(&BrandService_ServiceDesc, srv)
}

func _BrandService_BrandAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandServiceServer).BrandAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.BrandService/BrandAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandServiceServer).BrandAdd(ctx, req.(*BrandAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrandService_BrandList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandServiceServer).BrandList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.BrandService/BrandList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandServiceServer).BrandList(ctx, req.(*BrandListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrandService_BrandListByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandListByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandServiceServer).BrandListByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.BrandService/BrandListByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandServiceServer).BrandListByIds(ctx, req.(*BrandListByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrandService_BrandUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandServiceServer).BrandUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.BrandService/BrandUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandServiceServer).BrandUpdate(ctx, req.(*BrandUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrandService_BrandDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandServiceServer).BrandDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.BrandService/BrandDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandServiceServer).BrandDelete(ctx, req.(*BrandDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BrandService_ServiceDesc is the grpc.ServiceDesc for BrandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.BrandService",
	HandlerType: (*BrandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BrandAdd",
			Handler:    _BrandService_BrandAdd_Handler,
		},
		{
			MethodName: "BrandList",
			Handler:    _BrandService_BrandList_Handler,
		},
		{
			MethodName: "BrandListByIds",
			Handler:    _BrandService_BrandListByIds_Handler,
		},
		{
			MethodName: "BrandUpdate",
			Handler:    _BrandService_BrandUpdate_Handler,
		},
		{
			MethodName: "BrandDelete",
			Handler:    _BrandService_BrandDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pms.proto",
}

// CommentServiceClient is the client API for CommentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentServiceClient interface {
	CommentAdd(ctx context.Context, in *CommentAddReq, opts ...grpc.CallOption) (*CommentAddResp, error)
	CommentList(ctx context.Context, in *CommentListReq, opts ...grpc.CallOption) (*CommentListResp, error)
	CommentUpdate(ctx context.Context, in *CommentUpdateReq, opts ...grpc.CallOption) (*CommentUpdateResp, error)
	CommentDelete(ctx context.Context, in *CommentDeleteReq, opts ...grpc.CallOption) (*CommentDeleteResp, error)
}

type commentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentServiceClient(cc grpc.ClientConnInterface) CommentServiceClient {
	return &commentServiceClient{cc}
}

func (c *commentServiceClient) CommentAdd(ctx context.Context, in *CommentAddReq, opts ...grpc.CallOption) (*CommentAddResp, error) {
	out := new(CommentAddResp)
	err := c.cc.Invoke(ctx, "/pmsclient.CommentService/CommentAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) CommentList(ctx context.Context, in *CommentListReq, opts ...grpc.CallOption) (*CommentListResp, error) {
	out := new(CommentListResp)
	err := c.cc.Invoke(ctx, "/pmsclient.CommentService/CommentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) CommentUpdate(ctx context.Context, in *CommentUpdateReq, opts ...grpc.CallOption) (*CommentUpdateResp, error) {
	out := new(CommentUpdateResp)
	err := c.cc.Invoke(ctx, "/pmsclient.CommentService/CommentUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) CommentDelete(ctx context.Context, in *CommentDeleteReq, opts ...grpc.CallOption) (*CommentDeleteResp, error) {
	out := new(CommentDeleteResp)
	err := c.cc.Invoke(ctx, "/pmsclient.CommentService/CommentDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentServiceServer is the server API for CommentService service.
// All implementations must embed UnimplementedCommentServiceServer
// for forward compatibility
type CommentServiceServer interface {
	CommentAdd(context.Context, *CommentAddReq) (*CommentAddResp, error)
	CommentList(context.Context, *CommentListReq) (*CommentListResp, error)
	CommentUpdate(context.Context, *CommentUpdateReq) (*CommentUpdateResp, error)
	CommentDelete(context.Context, *CommentDeleteReq) (*CommentDeleteResp, error)
	mustEmbedUnimplementedCommentServiceServer()
}

// UnimplementedCommentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommentServiceServer struct {
}

func (UnimplementedCommentServiceServer) CommentAdd(context.Context, *CommentAddReq) (*CommentAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentAdd not implemented")
}
func (UnimplementedCommentServiceServer) CommentList(context.Context, *CommentListReq) (*CommentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentList not implemented")
}
func (UnimplementedCommentServiceServer) CommentUpdate(context.Context, *CommentUpdateReq) (*CommentUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentUpdate not implemented")
}
func (UnimplementedCommentServiceServer) CommentDelete(context.Context, *CommentDeleteReq) (*CommentDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentDelete not implemented")
}
func (UnimplementedCommentServiceServer) mustEmbedUnimplementedCommentServiceServer() {}

// UnsafeCommentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentServiceServer will
// result in compilation errors.
type UnsafeCommentServiceServer interface {
	mustEmbedUnimplementedCommentServiceServer()
}

func RegisterCommentServiceServer(s grpc.ServiceRegistrar, srv CommentServiceServer) {
	s.RegisterService(&CommentService_ServiceDesc, srv)
}

func _CommentService_CommentAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).CommentAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.CommentService/CommentAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).CommentAdd(ctx, req.(*CommentAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_CommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).CommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.CommentService/CommentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).CommentList(ctx, req.(*CommentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_CommentUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).CommentUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.CommentService/CommentUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).CommentUpdate(ctx, req.(*CommentUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_CommentDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).CommentDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.CommentService/CommentDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).CommentDelete(ctx, req.(*CommentDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentService_ServiceDesc is the grpc.ServiceDesc for CommentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.CommentService",
	HandlerType: (*CommentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommentAdd",
			Handler:    _CommentService_CommentAdd_Handler,
		},
		{
			MethodName: "CommentList",
			Handler:    _CommentService_CommentList_Handler,
		},
		{
			MethodName: "CommentUpdate",
			Handler:    _CommentService_CommentUpdate_Handler,
		},
		{
			MethodName: "CommentDelete",
			Handler:    _CommentService_CommentDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pms.proto",
}

// CommentReplayServiceClient is the client API for CommentReplayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentReplayServiceClient interface {
	CommentReplayAdd(ctx context.Context, in *CommentReplayAddReq, opts ...grpc.CallOption) (*CommentReplayAddResp, error)
	CommentReplayList(ctx context.Context, in *CommentReplayListReq, opts ...grpc.CallOption) (*CommentReplayListResp, error)
	CommentReplayUpdate(ctx context.Context, in *CommentReplayUpdateReq, opts ...grpc.CallOption) (*CommentReplayUpdateResp, error)
	CommentReplayDelete(ctx context.Context, in *CommentReplayDeleteReq, opts ...grpc.CallOption) (*CommentReplayDeleteResp, error)
}

type commentReplayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentReplayServiceClient(cc grpc.ClientConnInterface) CommentReplayServiceClient {
	return &commentReplayServiceClient{cc}
}

func (c *commentReplayServiceClient) CommentReplayAdd(ctx context.Context, in *CommentReplayAddReq, opts ...grpc.CallOption) (*CommentReplayAddResp, error) {
	out := new(CommentReplayAddResp)
	err := c.cc.Invoke(ctx, "/pmsclient.CommentReplayService/CommentReplayAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentReplayServiceClient) CommentReplayList(ctx context.Context, in *CommentReplayListReq, opts ...grpc.CallOption) (*CommentReplayListResp, error) {
	out := new(CommentReplayListResp)
	err := c.cc.Invoke(ctx, "/pmsclient.CommentReplayService/CommentReplayList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentReplayServiceClient) CommentReplayUpdate(ctx context.Context, in *CommentReplayUpdateReq, opts ...grpc.CallOption) (*CommentReplayUpdateResp, error) {
	out := new(CommentReplayUpdateResp)
	err := c.cc.Invoke(ctx, "/pmsclient.CommentReplayService/CommentReplayUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentReplayServiceClient) CommentReplayDelete(ctx context.Context, in *CommentReplayDeleteReq, opts ...grpc.CallOption) (*CommentReplayDeleteResp, error) {
	out := new(CommentReplayDeleteResp)
	err := c.cc.Invoke(ctx, "/pmsclient.CommentReplayService/CommentReplayDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentReplayServiceServer is the server API for CommentReplayService service.
// All implementations must embed UnimplementedCommentReplayServiceServer
// for forward compatibility
type CommentReplayServiceServer interface {
	CommentReplayAdd(context.Context, *CommentReplayAddReq) (*CommentReplayAddResp, error)
	CommentReplayList(context.Context, *CommentReplayListReq) (*CommentReplayListResp, error)
	CommentReplayUpdate(context.Context, *CommentReplayUpdateReq) (*CommentReplayUpdateResp, error)
	CommentReplayDelete(context.Context, *CommentReplayDeleteReq) (*CommentReplayDeleteResp, error)
	mustEmbedUnimplementedCommentReplayServiceServer()
}

// UnimplementedCommentReplayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommentReplayServiceServer struct {
}

func (UnimplementedCommentReplayServiceServer) CommentReplayAdd(context.Context, *CommentReplayAddReq) (*CommentReplayAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentReplayAdd not implemented")
}
func (UnimplementedCommentReplayServiceServer) CommentReplayList(context.Context, *CommentReplayListReq) (*CommentReplayListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentReplayList not implemented")
}
func (UnimplementedCommentReplayServiceServer) CommentReplayUpdate(context.Context, *CommentReplayUpdateReq) (*CommentReplayUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentReplayUpdate not implemented")
}
func (UnimplementedCommentReplayServiceServer) CommentReplayDelete(context.Context, *CommentReplayDeleteReq) (*CommentReplayDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentReplayDelete not implemented")
}
func (UnimplementedCommentReplayServiceServer) mustEmbedUnimplementedCommentReplayServiceServer() {}

// UnsafeCommentReplayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentReplayServiceServer will
// result in compilation errors.
type UnsafeCommentReplayServiceServer interface {
	mustEmbedUnimplementedCommentReplayServiceServer()
}

func RegisterCommentReplayServiceServer(s grpc.ServiceRegistrar, srv CommentReplayServiceServer) {
	s.RegisterService(&CommentReplayService_ServiceDesc, srv)
}

func _CommentReplayService_CommentReplayAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentReplayAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentReplayServiceServer).CommentReplayAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.CommentReplayService/CommentReplayAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentReplayServiceServer).CommentReplayAdd(ctx, req.(*CommentReplayAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentReplayService_CommentReplayList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentReplayListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentReplayServiceServer).CommentReplayList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.CommentReplayService/CommentReplayList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentReplayServiceServer).CommentReplayList(ctx, req.(*CommentReplayListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentReplayService_CommentReplayUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentReplayUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentReplayServiceServer).CommentReplayUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.CommentReplayService/CommentReplayUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentReplayServiceServer).CommentReplayUpdate(ctx, req.(*CommentReplayUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentReplayService_CommentReplayDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentReplayDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentReplayServiceServer).CommentReplayDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.CommentReplayService/CommentReplayDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentReplayServiceServer).CommentReplayDelete(ctx, req.(*CommentReplayDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentReplayService_ServiceDesc is the grpc.ServiceDesc for CommentReplayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentReplayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.CommentReplayService",
	HandlerType: (*CommentReplayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommentReplayAdd",
			Handler:    _CommentReplayService_CommentReplayAdd_Handler,
		},
		{
			MethodName: "CommentReplayList",
			Handler:    _CommentReplayService_CommentReplayList_Handler,
		},
		{
			MethodName: "CommentReplayUpdate",
			Handler:    _CommentReplayService_CommentReplayUpdate_Handler,
		},
		{
			MethodName: "CommentReplayDelete",
			Handler:    _CommentReplayService_CommentReplayDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pms.proto",
}

// FeightTemplateServiceClient is the client API for FeightTemplateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeightTemplateServiceClient interface {
	FeightTemplateAdd(ctx context.Context, in *FeightTemplateAddReq, opts ...grpc.CallOption) (*FeightTemplateAddResp, error)
	FeightTemplateList(ctx context.Context, in *FeightTemplateListReq, opts ...grpc.CallOption) (*FeightTemplateListResp, error)
	FeightTemplateUpdate(ctx context.Context, in *FeightTemplateUpdateReq, opts ...grpc.CallOption) (*FeightTemplateUpdateResp, error)
	FeightTemplateDelete(ctx context.Context, in *FeightTemplateDeleteReq, opts ...grpc.CallOption) (*FeightTemplateDeleteResp, error)
}

type feightTemplateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeightTemplateServiceClient(cc grpc.ClientConnInterface) FeightTemplateServiceClient {
	return &feightTemplateServiceClient{cc}
}

func (c *feightTemplateServiceClient) FeightTemplateAdd(ctx context.Context, in *FeightTemplateAddReq, opts ...grpc.CallOption) (*FeightTemplateAddResp, error) {
	out := new(FeightTemplateAddResp)
	err := c.cc.Invoke(ctx, "/pmsclient.FeightTemplateService/FeightTemplateAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feightTemplateServiceClient) FeightTemplateList(ctx context.Context, in *FeightTemplateListReq, opts ...grpc.CallOption) (*FeightTemplateListResp, error) {
	out := new(FeightTemplateListResp)
	err := c.cc.Invoke(ctx, "/pmsclient.FeightTemplateService/FeightTemplateList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feightTemplateServiceClient) FeightTemplateUpdate(ctx context.Context, in *FeightTemplateUpdateReq, opts ...grpc.CallOption) (*FeightTemplateUpdateResp, error) {
	out := new(FeightTemplateUpdateResp)
	err := c.cc.Invoke(ctx, "/pmsclient.FeightTemplateService/FeightTemplateUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feightTemplateServiceClient) FeightTemplateDelete(ctx context.Context, in *FeightTemplateDeleteReq, opts ...grpc.CallOption) (*FeightTemplateDeleteResp, error) {
	out := new(FeightTemplateDeleteResp)
	err := c.cc.Invoke(ctx, "/pmsclient.FeightTemplateService/FeightTemplateDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeightTemplateServiceServer is the server API for FeightTemplateService service.
// All implementations must embed UnimplementedFeightTemplateServiceServer
// for forward compatibility
type FeightTemplateServiceServer interface {
	FeightTemplateAdd(context.Context, *FeightTemplateAddReq) (*FeightTemplateAddResp, error)
	FeightTemplateList(context.Context, *FeightTemplateListReq) (*FeightTemplateListResp, error)
	FeightTemplateUpdate(context.Context, *FeightTemplateUpdateReq) (*FeightTemplateUpdateResp, error)
	FeightTemplateDelete(context.Context, *FeightTemplateDeleteReq) (*FeightTemplateDeleteResp, error)
	mustEmbedUnimplementedFeightTemplateServiceServer()
}

// UnimplementedFeightTemplateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFeightTemplateServiceServer struct {
}

func (UnimplementedFeightTemplateServiceServer) FeightTemplateAdd(context.Context, *FeightTemplateAddReq) (*FeightTemplateAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeightTemplateAdd not implemented")
}
func (UnimplementedFeightTemplateServiceServer) FeightTemplateList(context.Context, *FeightTemplateListReq) (*FeightTemplateListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeightTemplateList not implemented")
}
func (UnimplementedFeightTemplateServiceServer) FeightTemplateUpdate(context.Context, *FeightTemplateUpdateReq) (*FeightTemplateUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeightTemplateUpdate not implemented")
}
func (UnimplementedFeightTemplateServiceServer) FeightTemplateDelete(context.Context, *FeightTemplateDeleteReq) (*FeightTemplateDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeightTemplateDelete not implemented")
}
func (UnimplementedFeightTemplateServiceServer) mustEmbedUnimplementedFeightTemplateServiceServer() {}

// UnsafeFeightTemplateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeightTemplateServiceServer will
// result in compilation errors.
type UnsafeFeightTemplateServiceServer interface {
	mustEmbedUnimplementedFeightTemplateServiceServer()
}

func RegisterFeightTemplateServiceServer(s grpc.ServiceRegistrar, srv FeightTemplateServiceServer) {
	s.RegisterService(&FeightTemplateService_ServiceDesc, srv)
}

func _FeightTemplateService_FeightTemplateAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeightTemplateAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeightTemplateServiceServer).FeightTemplateAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.FeightTemplateService/FeightTemplateAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeightTemplateServiceServer).FeightTemplateAdd(ctx, req.(*FeightTemplateAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeightTemplateService_FeightTemplateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeightTemplateListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeightTemplateServiceServer).FeightTemplateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.FeightTemplateService/FeightTemplateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeightTemplateServiceServer).FeightTemplateList(ctx, req.(*FeightTemplateListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeightTemplateService_FeightTemplateUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeightTemplateUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeightTemplateServiceServer).FeightTemplateUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.FeightTemplateService/FeightTemplateUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeightTemplateServiceServer).FeightTemplateUpdate(ctx, req.(*FeightTemplateUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeightTemplateService_FeightTemplateDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeightTemplateDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeightTemplateServiceServer).FeightTemplateDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.FeightTemplateService/FeightTemplateDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeightTemplateServiceServer).FeightTemplateDelete(ctx, req.(*FeightTemplateDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FeightTemplateService_ServiceDesc is the grpc.ServiceDesc for FeightTemplateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeightTemplateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.FeightTemplateService",
	HandlerType: (*FeightTemplateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FeightTemplateAdd",
			Handler:    _FeightTemplateService_FeightTemplateAdd_Handler,
		},
		{
			MethodName: "FeightTemplateList",
			Handler:    _FeightTemplateService_FeightTemplateList_Handler,
		},
		{
			MethodName: "FeightTemplateUpdate",
			Handler:    _FeightTemplateService_FeightTemplateUpdate_Handler,
		},
		{
			MethodName: "FeightTemplateDelete",
			Handler:    _FeightTemplateService_FeightTemplateDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pms.proto",
}

// MemberPriceServiceClient is the client API for MemberPriceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberPriceServiceClient interface {
	MemberPriceAdd(ctx context.Context, in *MemberPriceAddReq, opts ...grpc.CallOption) (*MemberPriceAddResp, error)
	MemberPriceList(ctx context.Context, in *MemberPriceListReq, opts ...grpc.CallOption) (*MemberPriceListResp, error)
	MemberPriceUpdate(ctx context.Context, in *MemberPriceUpdateReq, opts ...grpc.CallOption) (*MemberPriceUpdateResp, error)
	MemberPriceDelete(ctx context.Context, in *MemberPriceDeleteReq, opts ...grpc.CallOption) (*MemberPriceDeleteResp, error)
}

type memberPriceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberPriceServiceClient(cc grpc.ClientConnInterface) MemberPriceServiceClient {
	return &memberPriceServiceClient{cc}
}

func (c *memberPriceServiceClient) MemberPriceAdd(ctx context.Context, in *MemberPriceAddReq, opts ...grpc.CallOption) (*MemberPriceAddResp, error) {
	out := new(MemberPriceAddResp)
	err := c.cc.Invoke(ctx, "/pmsclient.MemberPriceService/MemberPriceAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberPriceServiceClient) MemberPriceList(ctx context.Context, in *MemberPriceListReq, opts ...grpc.CallOption) (*MemberPriceListResp, error) {
	out := new(MemberPriceListResp)
	err := c.cc.Invoke(ctx, "/pmsclient.MemberPriceService/MemberPriceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberPriceServiceClient) MemberPriceUpdate(ctx context.Context, in *MemberPriceUpdateReq, opts ...grpc.CallOption) (*MemberPriceUpdateResp, error) {
	out := new(MemberPriceUpdateResp)
	err := c.cc.Invoke(ctx, "/pmsclient.MemberPriceService/MemberPriceUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberPriceServiceClient) MemberPriceDelete(ctx context.Context, in *MemberPriceDeleteReq, opts ...grpc.CallOption) (*MemberPriceDeleteResp, error) {
	out := new(MemberPriceDeleteResp)
	err := c.cc.Invoke(ctx, "/pmsclient.MemberPriceService/MemberPriceDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberPriceServiceServer is the server API for MemberPriceService service.
// All implementations must embed UnimplementedMemberPriceServiceServer
// for forward compatibility
type MemberPriceServiceServer interface {
	MemberPriceAdd(context.Context, *MemberPriceAddReq) (*MemberPriceAddResp, error)
	MemberPriceList(context.Context, *MemberPriceListReq) (*MemberPriceListResp, error)
	MemberPriceUpdate(context.Context, *MemberPriceUpdateReq) (*MemberPriceUpdateResp, error)
	MemberPriceDelete(context.Context, *MemberPriceDeleteReq) (*MemberPriceDeleteResp, error)
	mustEmbedUnimplementedMemberPriceServiceServer()
}

// UnimplementedMemberPriceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberPriceServiceServer struct {
}

func (UnimplementedMemberPriceServiceServer) MemberPriceAdd(context.Context, *MemberPriceAddReq) (*MemberPriceAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberPriceAdd not implemented")
}
func (UnimplementedMemberPriceServiceServer) MemberPriceList(context.Context, *MemberPriceListReq) (*MemberPriceListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberPriceList not implemented")
}
func (UnimplementedMemberPriceServiceServer) MemberPriceUpdate(context.Context, *MemberPriceUpdateReq) (*MemberPriceUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberPriceUpdate not implemented")
}
func (UnimplementedMemberPriceServiceServer) MemberPriceDelete(context.Context, *MemberPriceDeleteReq) (*MemberPriceDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberPriceDelete not implemented")
}
func (UnimplementedMemberPriceServiceServer) mustEmbedUnimplementedMemberPriceServiceServer() {}

// UnsafeMemberPriceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberPriceServiceServer will
// result in compilation errors.
type UnsafeMemberPriceServiceServer interface {
	mustEmbedUnimplementedMemberPriceServiceServer()
}

func RegisterMemberPriceServiceServer(s grpc.ServiceRegistrar, srv MemberPriceServiceServer) {
	s.RegisterService(&MemberPriceService_ServiceDesc, srv)
}

func _MemberPriceService_MemberPriceAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberPriceAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberPriceServiceServer).MemberPriceAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.MemberPriceService/MemberPriceAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberPriceServiceServer).MemberPriceAdd(ctx, req.(*MemberPriceAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberPriceService_MemberPriceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberPriceListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberPriceServiceServer).MemberPriceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.MemberPriceService/MemberPriceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberPriceServiceServer).MemberPriceList(ctx, req.(*MemberPriceListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberPriceService_MemberPriceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberPriceUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberPriceServiceServer).MemberPriceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.MemberPriceService/MemberPriceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberPriceServiceServer).MemberPriceUpdate(ctx, req.(*MemberPriceUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberPriceService_MemberPriceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberPriceDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberPriceServiceServer).MemberPriceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.MemberPriceService/MemberPriceDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberPriceServiceServer).MemberPriceDelete(ctx, req.(*MemberPriceDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberPriceService_ServiceDesc is the grpc.ServiceDesc for MemberPriceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberPriceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.MemberPriceService",
	HandlerType: (*MemberPriceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MemberPriceAdd",
			Handler:    _MemberPriceService_MemberPriceAdd_Handler,
		},
		{
			MethodName: "MemberPriceList",
			Handler:    _MemberPriceService_MemberPriceList_Handler,
		},
		{
			MethodName: "MemberPriceUpdate",
			Handler:    _MemberPriceService_MemberPriceUpdate_Handler,
		},
		{
			MethodName: "MemberPriceDelete",
			Handler:    _MemberPriceService_MemberPriceDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pms.proto",
}

// ProductAttributeCategoryServiceClient is the client API for ProductAttributeCategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductAttributeCategoryServiceClient interface {
	ProductAttributeCategoryAdd(ctx context.Context, in *ProductAttributeCategoryAddReq, opts ...grpc.CallOption) (*ProductAttributeCategoryAddResp, error)
	ProductAttributeCategoryList(ctx context.Context, in *ProductAttributeCategoryListReq, opts ...grpc.CallOption) (*ProductAttributeCategoryListResp, error)
	ProductAttributeCategoryUpdate(ctx context.Context, in *ProductAttributeCategoryUpdateReq, opts ...grpc.CallOption) (*ProductAttributeCategoryUpdateResp, error)
	ProductAttributeCategoryDelete(ctx context.Context, in *ProductAttributeCategoryDeleteReq, opts ...grpc.CallOption) (*ProductAttributeCategoryDeleteResp, error)
}

type productAttributeCategoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductAttributeCategoryServiceClient(cc grpc.ClientConnInterface) ProductAttributeCategoryServiceClient {
	return &productAttributeCategoryServiceClient{cc}
}

func (c *productAttributeCategoryServiceClient) ProductAttributeCategoryAdd(ctx context.Context, in *ProductAttributeCategoryAddReq, opts ...grpc.CallOption) (*ProductAttributeCategoryAddResp, error) {
	out := new(ProductAttributeCategoryAddResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductAttributeCategoryService/ProductAttributeCategoryAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeCategoryServiceClient) ProductAttributeCategoryList(ctx context.Context, in *ProductAttributeCategoryListReq, opts ...grpc.CallOption) (*ProductAttributeCategoryListResp, error) {
	out := new(ProductAttributeCategoryListResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductAttributeCategoryService/ProductAttributeCategoryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeCategoryServiceClient) ProductAttributeCategoryUpdate(ctx context.Context, in *ProductAttributeCategoryUpdateReq, opts ...grpc.CallOption) (*ProductAttributeCategoryUpdateResp, error) {
	out := new(ProductAttributeCategoryUpdateResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductAttributeCategoryService/ProductAttributeCategoryUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeCategoryServiceClient) ProductAttributeCategoryDelete(ctx context.Context, in *ProductAttributeCategoryDeleteReq, opts ...grpc.CallOption) (*ProductAttributeCategoryDeleteResp, error) {
	out := new(ProductAttributeCategoryDeleteResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductAttributeCategoryService/ProductAttributeCategoryDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductAttributeCategoryServiceServer is the server API for ProductAttributeCategoryService service.
// All implementations must embed UnimplementedProductAttributeCategoryServiceServer
// for forward compatibility
type ProductAttributeCategoryServiceServer interface {
	ProductAttributeCategoryAdd(context.Context, *ProductAttributeCategoryAddReq) (*ProductAttributeCategoryAddResp, error)
	ProductAttributeCategoryList(context.Context, *ProductAttributeCategoryListReq) (*ProductAttributeCategoryListResp, error)
	ProductAttributeCategoryUpdate(context.Context, *ProductAttributeCategoryUpdateReq) (*ProductAttributeCategoryUpdateResp, error)
	ProductAttributeCategoryDelete(context.Context, *ProductAttributeCategoryDeleteReq) (*ProductAttributeCategoryDeleteResp, error)
	mustEmbedUnimplementedProductAttributeCategoryServiceServer()
}

// UnimplementedProductAttributeCategoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductAttributeCategoryServiceServer struct {
}

func (UnimplementedProductAttributeCategoryServiceServer) ProductAttributeCategoryAdd(context.Context, *ProductAttributeCategoryAddReq) (*ProductAttributeCategoryAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAttributeCategoryAdd not implemented")
}
func (UnimplementedProductAttributeCategoryServiceServer) ProductAttributeCategoryList(context.Context, *ProductAttributeCategoryListReq) (*ProductAttributeCategoryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAttributeCategoryList not implemented")
}
func (UnimplementedProductAttributeCategoryServiceServer) ProductAttributeCategoryUpdate(context.Context, *ProductAttributeCategoryUpdateReq) (*ProductAttributeCategoryUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAttributeCategoryUpdate not implemented")
}
func (UnimplementedProductAttributeCategoryServiceServer) ProductAttributeCategoryDelete(context.Context, *ProductAttributeCategoryDeleteReq) (*ProductAttributeCategoryDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAttributeCategoryDelete not implemented")
}
func (UnimplementedProductAttributeCategoryServiceServer) mustEmbedUnimplementedProductAttributeCategoryServiceServer() {
}

// UnsafeProductAttributeCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductAttributeCategoryServiceServer will
// result in compilation errors.
type UnsafeProductAttributeCategoryServiceServer interface {
	mustEmbedUnimplementedProductAttributeCategoryServiceServer()
}

func RegisterProductAttributeCategoryServiceServer(s grpc.ServiceRegistrar, srv ProductAttributeCategoryServiceServer) {
	s.RegisterService(&ProductAttributeCategoryService_ServiceDesc, srv)
}

func _ProductAttributeCategoryService_ProductAttributeCategoryAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttributeCategoryAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeCategoryServiceServer).ProductAttributeCategoryAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductAttributeCategoryService/ProductAttributeCategoryAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeCategoryServiceServer).ProductAttributeCategoryAdd(ctx, req.(*ProductAttributeCategoryAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeCategoryService_ProductAttributeCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttributeCategoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeCategoryServiceServer).ProductAttributeCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductAttributeCategoryService/ProductAttributeCategoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeCategoryServiceServer).ProductAttributeCategoryList(ctx, req.(*ProductAttributeCategoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeCategoryService_ProductAttributeCategoryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttributeCategoryUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeCategoryServiceServer).ProductAttributeCategoryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductAttributeCategoryService/ProductAttributeCategoryUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeCategoryServiceServer).ProductAttributeCategoryUpdate(ctx, req.(*ProductAttributeCategoryUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeCategoryService_ProductAttributeCategoryDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttributeCategoryDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeCategoryServiceServer).ProductAttributeCategoryDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductAttributeCategoryService/ProductAttributeCategoryDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeCategoryServiceServer).ProductAttributeCategoryDelete(ctx, req.(*ProductAttributeCategoryDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductAttributeCategoryService_ServiceDesc is the grpc.ServiceDesc for ProductAttributeCategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductAttributeCategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductAttributeCategoryService",
	HandlerType: (*ProductAttributeCategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProductAttributeCategoryAdd",
			Handler:    _ProductAttributeCategoryService_ProductAttributeCategoryAdd_Handler,
		},
		{
			MethodName: "ProductAttributeCategoryList",
			Handler:    _ProductAttributeCategoryService_ProductAttributeCategoryList_Handler,
		},
		{
			MethodName: "ProductAttributeCategoryUpdate",
			Handler:    _ProductAttributeCategoryService_ProductAttributeCategoryUpdate_Handler,
		},
		{
			MethodName: "ProductAttributeCategoryDelete",
			Handler:    _ProductAttributeCategoryService_ProductAttributeCategoryDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pms.proto",
}

// ProductAttributeServiceClient is the client API for ProductAttributeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductAttributeServiceClient interface {
	ProductAttributeAdd(ctx context.Context, in *ProductAttributeAddReq, opts ...grpc.CallOption) (*ProductAttributeAddResp, error)
	ProductAttributeList(ctx context.Context, in *ProductAttributeListReq, opts ...grpc.CallOption) (*ProductAttributeListResp, error)
	ProductAttributeUpdate(ctx context.Context, in *ProductAttributeUpdateReq, opts ...grpc.CallOption) (*ProductAttributeUpdateResp, error)
	ProductAttributeDelete(ctx context.Context, in *ProductAttributeDeleteReq, opts ...grpc.CallOption) (*ProductAttributeDeleteResp, error)
}

type productAttributeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductAttributeServiceClient(cc grpc.ClientConnInterface) ProductAttributeServiceClient {
	return &productAttributeServiceClient{cc}
}

func (c *productAttributeServiceClient) ProductAttributeAdd(ctx context.Context, in *ProductAttributeAddReq, opts ...grpc.CallOption) (*ProductAttributeAddResp, error) {
	out := new(ProductAttributeAddResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductAttributeService/ProductAttributeAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeServiceClient) ProductAttributeList(ctx context.Context, in *ProductAttributeListReq, opts ...grpc.CallOption) (*ProductAttributeListResp, error) {
	out := new(ProductAttributeListResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductAttributeService/ProductAttributeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeServiceClient) ProductAttributeUpdate(ctx context.Context, in *ProductAttributeUpdateReq, opts ...grpc.CallOption) (*ProductAttributeUpdateResp, error) {
	out := new(ProductAttributeUpdateResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductAttributeService/ProductAttributeUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeServiceClient) ProductAttributeDelete(ctx context.Context, in *ProductAttributeDeleteReq, opts ...grpc.CallOption) (*ProductAttributeDeleteResp, error) {
	out := new(ProductAttributeDeleteResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductAttributeService/ProductAttributeDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductAttributeServiceServer is the server API for ProductAttributeService service.
// All implementations must embed UnimplementedProductAttributeServiceServer
// for forward compatibility
type ProductAttributeServiceServer interface {
	ProductAttributeAdd(context.Context, *ProductAttributeAddReq) (*ProductAttributeAddResp, error)
	ProductAttributeList(context.Context, *ProductAttributeListReq) (*ProductAttributeListResp, error)
	ProductAttributeUpdate(context.Context, *ProductAttributeUpdateReq) (*ProductAttributeUpdateResp, error)
	ProductAttributeDelete(context.Context, *ProductAttributeDeleteReq) (*ProductAttributeDeleteResp, error)
	mustEmbedUnimplementedProductAttributeServiceServer()
}

// UnimplementedProductAttributeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductAttributeServiceServer struct {
}

func (UnimplementedProductAttributeServiceServer) ProductAttributeAdd(context.Context, *ProductAttributeAddReq) (*ProductAttributeAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAttributeAdd not implemented")
}
func (UnimplementedProductAttributeServiceServer) ProductAttributeList(context.Context, *ProductAttributeListReq) (*ProductAttributeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAttributeList not implemented")
}
func (UnimplementedProductAttributeServiceServer) ProductAttributeUpdate(context.Context, *ProductAttributeUpdateReq) (*ProductAttributeUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAttributeUpdate not implemented")
}
func (UnimplementedProductAttributeServiceServer) ProductAttributeDelete(context.Context, *ProductAttributeDeleteReq) (*ProductAttributeDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAttributeDelete not implemented")
}
func (UnimplementedProductAttributeServiceServer) mustEmbedUnimplementedProductAttributeServiceServer() {
}

// UnsafeProductAttributeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductAttributeServiceServer will
// result in compilation errors.
type UnsafeProductAttributeServiceServer interface {
	mustEmbedUnimplementedProductAttributeServiceServer()
}

func RegisterProductAttributeServiceServer(s grpc.ServiceRegistrar, srv ProductAttributeServiceServer) {
	s.RegisterService(&ProductAttributeService_ServiceDesc, srv)
}

func _ProductAttributeService_ProductAttributeAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttributeAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeServiceServer).ProductAttributeAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductAttributeService/ProductAttributeAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeServiceServer).ProductAttributeAdd(ctx, req.(*ProductAttributeAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeService_ProductAttributeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttributeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeServiceServer).ProductAttributeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductAttributeService/ProductAttributeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeServiceServer).ProductAttributeList(ctx, req.(*ProductAttributeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeService_ProductAttributeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttributeUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeServiceServer).ProductAttributeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductAttributeService/ProductAttributeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeServiceServer).ProductAttributeUpdate(ctx, req.(*ProductAttributeUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeService_ProductAttributeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttributeDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeServiceServer).ProductAttributeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductAttributeService/ProductAttributeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeServiceServer).ProductAttributeDelete(ctx, req.(*ProductAttributeDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductAttributeService_ServiceDesc is the grpc.ServiceDesc for ProductAttributeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductAttributeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductAttributeService",
	HandlerType: (*ProductAttributeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProductAttributeAdd",
			Handler:    _ProductAttributeService_ProductAttributeAdd_Handler,
		},
		{
			MethodName: "ProductAttributeList",
			Handler:    _ProductAttributeService_ProductAttributeList_Handler,
		},
		{
			MethodName: "ProductAttributeUpdate",
			Handler:    _ProductAttributeService_ProductAttributeUpdate_Handler,
		},
		{
			MethodName: "ProductAttributeDelete",
			Handler:    _ProductAttributeService_ProductAttributeDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pms.proto",
}

// ProductAttributeValueServiceClient is the client API for ProductAttributeValueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductAttributeValueServiceClient interface {
	ProductAttributeValueAdd(ctx context.Context, in *ProductAttributeValueAddReq, opts ...grpc.CallOption) (*ProductAttributeValueAddResp, error)
	ProductAttributeValueList(ctx context.Context, in *ProductAttributeValueListReq, opts ...grpc.CallOption) (*ProductAttributeValueListResp, error)
	ProductAttributeValueUpdate(ctx context.Context, in *ProductAttributeValueUpdateReq, opts ...grpc.CallOption) (*ProductAttributeValueUpdateResp, error)
	ProductAttributeValueDelete(ctx context.Context, in *ProductAttributeValueDeleteReq, opts ...grpc.CallOption) (*ProductAttributeValueDeleteResp, error)
}

type productAttributeValueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductAttributeValueServiceClient(cc grpc.ClientConnInterface) ProductAttributeValueServiceClient {
	return &productAttributeValueServiceClient{cc}
}

func (c *productAttributeValueServiceClient) ProductAttributeValueAdd(ctx context.Context, in *ProductAttributeValueAddReq, opts ...grpc.CallOption) (*ProductAttributeValueAddResp, error) {
	out := new(ProductAttributeValueAddResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductAttributeValueService/ProductAttributeValueAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeValueServiceClient) ProductAttributeValueList(ctx context.Context, in *ProductAttributeValueListReq, opts ...grpc.CallOption) (*ProductAttributeValueListResp, error) {
	out := new(ProductAttributeValueListResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductAttributeValueService/ProductAttributeValueList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeValueServiceClient) ProductAttributeValueUpdate(ctx context.Context, in *ProductAttributeValueUpdateReq, opts ...grpc.CallOption) (*ProductAttributeValueUpdateResp, error) {
	out := new(ProductAttributeValueUpdateResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductAttributeValueService/ProductAttributeValueUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productAttributeValueServiceClient) ProductAttributeValueDelete(ctx context.Context, in *ProductAttributeValueDeleteReq, opts ...grpc.CallOption) (*ProductAttributeValueDeleteResp, error) {
	out := new(ProductAttributeValueDeleteResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductAttributeValueService/ProductAttributeValueDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductAttributeValueServiceServer is the server API for ProductAttributeValueService service.
// All implementations must embed UnimplementedProductAttributeValueServiceServer
// for forward compatibility
type ProductAttributeValueServiceServer interface {
	ProductAttributeValueAdd(context.Context, *ProductAttributeValueAddReq) (*ProductAttributeValueAddResp, error)
	ProductAttributeValueList(context.Context, *ProductAttributeValueListReq) (*ProductAttributeValueListResp, error)
	ProductAttributeValueUpdate(context.Context, *ProductAttributeValueUpdateReq) (*ProductAttributeValueUpdateResp, error)
	ProductAttributeValueDelete(context.Context, *ProductAttributeValueDeleteReq) (*ProductAttributeValueDeleteResp, error)
	mustEmbedUnimplementedProductAttributeValueServiceServer()
}

// UnimplementedProductAttributeValueServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductAttributeValueServiceServer struct {
}

func (UnimplementedProductAttributeValueServiceServer) ProductAttributeValueAdd(context.Context, *ProductAttributeValueAddReq) (*ProductAttributeValueAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAttributeValueAdd not implemented")
}
func (UnimplementedProductAttributeValueServiceServer) ProductAttributeValueList(context.Context, *ProductAttributeValueListReq) (*ProductAttributeValueListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAttributeValueList not implemented")
}
func (UnimplementedProductAttributeValueServiceServer) ProductAttributeValueUpdate(context.Context, *ProductAttributeValueUpdateReq) (*ProductAttributeValueUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAttributeValueUpdate not implemented")
}
func (UnimplementedProductAttributeValueServiceServer) ProductAttributeValueDelete(context.Context, *ProductAttributeValueDeleteReq) (*ProductAttributeValueDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAttributeValueDelete not implemented")
}
func (UnimplementedProductAttributeValueServiceServer) mustEmbedUnimplementedProductAttributeValueServiceServer() {
}

// UnsafeProductAttributeValueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductAttributeValueServiceServer will
// result in compilation errors.
type UnsafeProductAttributeValueServiceServer interface {
	mustEmbedUnimplementedProductAttributeValueServiceServer()
}

func RegisterProductAttributeValueServiceServer(s grpc.ServiceRegistrar, srv ProductAttributeValueServiceServer) {
	s.RegisterService(&ProductAttributeValueService_ServiceDesc, srv)
}

func _ProductAttributeValueService_ProductAttributeValueAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttributeValueAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeValueServiceServer).ProductAttributeValueAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductAttributeValueService/ProductAttributeValueAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeValueServiceServer).ProductAttributeValueAdd(ctx, req.(*ProductAttributeValueAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeValueService_ProductAttributeValueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttributeValueListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeValueServiceServer).ProductAttributeValueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductAttributeValueService/ProductAttributeValueList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeValueServiceServer).ProductAttributeValueList(ctx, req.(*ProductAttributeValueListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeValueService_ProductAttributeValueUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttributeValueUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeValueServiceServer).ProductAttributeValueUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductAttributeValueService/ProductAttributeValueUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeValueServiceServer).ProductAttributeValueUpdate(ctx, req.(*ProductAttributeValueUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductAttributeValueService_ProductAttributeValueDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductAttributeValueDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAttributeValueServiceServer).ProductAttributeValueDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductAttributeValueService/ProductAttributeValueDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAttributeValueServiceServer).ProductAttributeValueDelete(ctx, req.(*ProductAttributeValueDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductAttributeValueService_ServiceDesc is the grpc.ServiceDesc for ProductAttributeValueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductAttributeValueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductAttributeValueService",
	HandlerType: (*ProductAttributeValueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProductAttributeValueAdd",
			Handler:    _ProductAttributeValueService_ProductAttributeValueAdd_Handler,
		},
		{
			MethodName: "ProductAttributeValueList",
			Handler:    _ProductAttributeValueService_ProductAttributeValueList_Handler,
		},
		{
			MethodName: "ProductAttributeValueUpdate",
			Handler:    _ProductAttributeValueService_ProductAttributeValueUpdate_Handler,
		},
		{
			MethodName: "ProductAttributeValueDelete",
			Handler:    _ProductAttributeValueService_ProductAttributeValueDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pms.proto",
}

// ProductCategoryAttributeRelationServiceClient is the client API for ProductCategoryAttributeRelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductCategoryAttributeRelationServiceClient interface {
	ProductCategoryAttributeRelationAdd(ctx context.Context, in *ProductCategoryAttributeRelationAddReq, opts ...grpc.CallOption) (*ProductCategoryAttributeRelationAddResp, error)
	ProductCategoryAttributeRelationList(ctx context.Context, in *ProductCategoryAttributeRelationListReq, opts ...grpc.CallOption) (*ProductCategoryAttributeRelationListResp, error)
	ProductCategoryAttributeRelationUpdate(ctx context.Context, in *ProductCategoryAttributeRelationUpdateReq, opts ...grpc.CallOption) (*ProductCategoryAttributeRelationUpdateResp, error)
	ProductCategoryAttributeRelationDelete(ctx context.Context, in *ProductCategoryAttributeRelationDeleteReq, opts ...grpc.CallOption) (*ProductCategoryAttributeRelationDeleteResp, error)
}

type productCategoryAttributeRelationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductCategoryAttributeRelationServiceClient(cc grpc.ClientConnInterface) ProductCategoryAttributeRelationServiceClient {
	return &productCategoryAttributeRelationServiceClient{cc}
}

func (c *productCategoryAttributeRelationServiceClient) ProductCategoryAttributeRelationAdd(ctx context.Context, in *ProductCategoryAttributeRelationAddReq, opts ...grpc.CallOption) (*ProductCategoryAttributeRelationAddResp, error) {
	out := new(ProductCategoryAttributeRelationAddResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductCategoryAttributeRelationService/ProductCategoryAttributeRelationAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryAttributeRelationServiceClient) ProductCategoryAttributeRelationList(ctx context.Context, in *ProductCategoryAttributeRelationListReq, opts ...grpc.CallOption) (*ProductCategoryAttributeRelationListResp, error) {
	out := new(ProductCategoryAttributeRelationListResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductCategoryAttributeRelationService/ProductCategoryAttributeRelationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryAttributeRelationServiceClient) ProductCategoryAttributeRelationUpdate(ctx context.Context, in *ProductCategoryAttributeRelationUpdateReq, opts ...grpc.CallOption) (*ProductCategoryAttributeRelationUpdateResp, error) {
	out := new(ProductCategoryAttributeRelationUpdateResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductCategoryAttributeRelationService/ProductCategoryAttributeRelationUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryAttributeRelationServiceClient) ProductCategoryAttributeRelationDelete(ctx context.Context, in *ProductCategoryAttributeRelationDeleteReq, opts ...grpc.CallOption) (*ProductCategoryAttributeRelationDeleteResp, error) {
	out := new(ProductCategoryAttributeRelationDeleteResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductCategoryAttributeRelationService/ProductCategoryAttributeRelationDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductCategoryAttributeRelationServiceServer is the server API for ProductCategoryAttributeRelationService service.
// All implementations must embed UnimplementedProductCategoryAttributeRelationServiceServer
// for forward compatibility
type ProductCategoryAttributeRelationServiceServer interface {
	ProductCategoryAttributeRelationAdd(context.Context, *ProductCategoryAttributeRelationAddReq) (*ProductCategoryAttributeRelationAddResp, error)
	ProductCategoryAttributeRelationList(context.Context, *ProductCategoryAttributeRelationListReq) (*ProductCategoryAttributeRelationListResp, error)
	ProductCategoryAttributeRelationUpdate(context.Context, *ProductCategoryAttributeRelationUpdateReq) (*ProductCategoryAttributeRelationUpdateResp, error)
	ProductCategoryAttributeRelationDelete(context.Context, *ProductCategoryAttributeRelationDeleteReq) (*ProductCategoryAttributeRelationDeleteResp, error)
	mustEmbedUnimplementedProductCategoryAttributeRelationServiceServer()
}

// UnimplementedProductCategoryAttributeRelationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductCategoryAttributeRelationServiceServer struct {
}

func (UnimplementedProductCategoryAttributeRelationServiceServer) ProductCategoryAttributeRelationAdd(context.Context, *ProductCategoryAttributeRelationAddReq) (*ProductCategoryAttributeRelationAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryAttributeRelationAdd not implemented")
}
func (UnimplementedProductCategoryAttributeRelationServiceServer) ProductCategoryAttributeRelationList(context.Context, *ProductCategoryAttributeRelationListReq) (*ProductCategoryAttributeRelationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryAttributeRelationList not implemented")
}
func (UnimplementedProductCategoryAttributeRelationServiceServer) ProductCategoryAttributeRelationUpdate(context.Context, *ProductCategoryAttributeRelationUpdateReq) (*ProductCategoryAttributeRelationUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryAttributeRelationUpdate not implemented")
}
func (UnimplementedProductCategoryAttributeRelationServiceServer) ProductCategoryAttributeRelationDelete(context.Context, *ProductCategoryAttributeRelationDeleteReq) (*ProductCategoryAttributeRelationDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryAttributeRelationDelete not implemented")
}
func (UnimplementedProductCategoryAttributeRelationServiceServer) mustEmbedUnimplementedProductCategoryAttributeRelationServiceServer() {
}

// UnsafeProductCategoryAttributeRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductCategoryAttributeRelationServiceServer will
// result in compilation errors.
type UnsafeProductCategoryAttributeRelationServiceServer interface {
	mustEmbedUnimplementedProductCategoryAttributeRelationServiceServer()
}

func RegisterProductCategoryAttributeRelationServiceServer(s grpc.ServiceRegistrar, srv ProductCategoryAttributeRelationServiceServer) {
	s.RegisterService(&ProductCategoryAttributeRelationService_ServiceDesc, srv)
}

func _ProductCategoryAttributeRelationService_ProductCategoryAttributeRelationAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryAttributeRelationAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryAttributeRelationServiceServer).ProductCategoryAttributeRelationAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductCategoryAttributeRelationService/ProductCategoryAttributeRelationAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryAttributeRelationServiceServer).ProductCategoryAttributeRelationAdd(ctx, req.(*ProductCategoryAttributeRelationAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryAttributeRelationService_ProductCategoryAttributeRelationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryAttributeRelationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryAttributeRelationServiceServer).ProductCategoryAttributeRelationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductCategoryAttributeRelationService/ProductCategoryAttributeRelationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryAttributeRelationServiceServer).ProductCategoryAttributeRelationList(ctx, req.(*ProductCategoryAttributeRelationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryAttributeRelationService_ProductCategoryAttributeRelationUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryAttributeRelationUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryAttributeRelationServiceServer).ProductCategoryAttributeRelationUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductCategoryAttributeRelationService/ProductCategoryAttributeRelationUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryAttributeRelationServiceServer).ProductCategoryAttributeRelationUpdate(ctx, req.(*ProductCategoryAttributeRelationUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryAttributeRelationService_ProductCategoryAttributeRelationDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryAttributeRelationDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryAttributeRelationServiceServer).ProductCategoryAttributeRelationDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductCategoryAttributeRelationService/ProductCategoryAttributeRelationDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryAttributeRelationServiceServer).ProductCategoryAttributeRelationDelete(ctx, req.(*ProductCategoryAttributeRelationDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductCategoryAttributeRelationService_ServiceDesc is the grpc.ServiceDesc for ProductCategoryAttributeRelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductCategoryAttributeRelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductCategoryAttributeRelationService",
	HandlerType: (*ProductCategoryAttributeRelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProductCategoryAttributeRelationAdd",
			Handler:    _ProductCategoryAttributeRelationService_ProductCategoryAttributeRelationAdd_Handler,
		},
		{
			MethodName: "ProductCategoryAttributeRelationList",
			Handler:    _ProductCategoryAttributeRelationService_ProductCategoryAttributeRelationList_Handler,
		},
		{
			MethodName: "ProductCategoryAttributeRelationUpdate",
			Handler:    _ProductCategoryAttributeRelationService_ProductCategoryAttributeRelationUpdate_Handler,
		},
		{
			MethodName: "ProductCategoryAttributeRelationDelete",
			Handler:    _ProductCategoryAttributeRelationService_ProductCategoryAttributeRelationDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pms.proto",
}

// ProductCategoryServiceClient is the client API for ProductCategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductCategoryServiceClient interface {
	ProductCategoryAdd(ctx context.Context, in *ProductCategoryAddReq, opts ...grpc.CallOption) (*ProductCategoryAddResp, error)
	ProductCategoryList(ctx context.Context, in *ProductCategoryListReq, opts ...grpc.CallOption) (*ProductCategoryListResp, error)
	ProductCategoryUpdate(ctx context.Context, in *ProductCategoryUpdateReq, opts ...grpc.CallOption) (*ProductCategoryUpdateResp, error)
	ProductCategoryDelete(ctx context.Context, in *ProductCategoryDeleteReq, opts ...grpc.CallOption) (*ProductCategoryDeleteResp, error)
}

type productCategoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductCategoryServiceClient(cc grpc.ClientConnInterface) ProductCategoryServiceClient {
	return &productCategoryServiceClient{cc}
}

func (c *productCategoryServiceClient) ProductCategoryAdd(ctx context.Context, in *ProductCategoryAddReq, opts ...grpc.CallOption) (*ProductCategoryAddResp, error) {
	out := new(ProductCategoryAddResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductCategoryService/ProductCategoryAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryServiceClient) ProductCategoryList(ctx context.Context, in *ProductCategoryListReq, opts ...grpc.CallOption) (*ProductCategoryListResp, error) {
	out := new(ProductCategoryListResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductCategoryService/ProductCategoryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryServiceClient) ProductCategoryUpdate(ctx context.Context, in *ProductCategoryUpdateReq, opts ...grpc.CallOption) (*ProductCategoryUpdateResp, error) {
	out := new(ProductCategoryUpdateResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductCategoryService/ProductCategoryUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryServiceClient) ProductCategoryDelete(ctx context.Context, in *ProductCategoryDeleteReq, opts ...grpc.CallOption) (*ProductCategoryDeleteResp, error) {
	out := new(ProductCategoryDeleteResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductCategoryService/ProductCategoryDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductCategoryServiceServer is the server API for ProductCategoryService service.
// All implementations must embed UnimplementedProductCategoryServiceServer
// for forward compatibility
type ProductCategoryServiceServer interface {
	ProductCategoryAdd(context.Context, *ProductCategoryAddReq) (*ProductCategoryAddResp, error)
	ProductCategoryList(context.Context, *ProductCategoryListReq) (*ProductCategoryListResp, error)
	ProductCategoryUpdate(context.Context, *ProductCategoryUpdateReq) (*ProductCategoryUpdateResp, error)
	ProductCategoryDelete(context.Context, *ProductCategoryDeleteReq) (*ProductCategoryDeleteResp, error)
	mustEmbedUnimplementedProductCategoryServiceServer()
}

// UnimplementedProductCategoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductCategoryServiceServer struct {
}

func (UnimplementedProductCategoryServiceServer) ProductCategoryAdd(context.Context, *ProductCategoryAddReq) (*ProductCategoryAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryAdd not implemented")
}
func (UnimplementedProductCategoryServiceServer) ProductCategoryList(context.Context, *ProductCategoryListReq) (*ProductCategoryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryList not implemented")
}
func (UnimplementedProductCategoryServiceServer) ProductCategoryUpdate(context.Context, *ProductCategoryUpdateReq) (*ProductCategoryUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryUpdate not implemented")
}
func (UnimplementedProductCategoryServiceServer) ProductCategoryDelete(context.Context, *ProductCategoryDeleteReq) (*ProductCategoryDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryDelete not implemented")
}
func (UnimplementedProductCategoryServiceServer) mustEmbedUnimplementedProductCategoryServiceServer() {
}

// UnsafeProductCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductCategoryServiceServer will
// result in compilation errors.
type UnsafeProductCategoryServiceServer interface {
	mustEmbedUnimplementedProductCategoryServiceServer()
}

func RegisterProductCategoryServiceServer(s grpc.ServiceRegistrar, srv ProductCategoryServiceServer) {
	s.RegisterService(&ProductCategoryService_ServiceDesc, srv)
}

func _ProductCategoryService_ProductCategoryAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).ProductCategoryAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductCategoryService/ProductCategoryAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).ProductCategoryAdd(ctx, req.(*ProductCategoryAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryService_ProductCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).ProductCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductCategoryService/ProductCategoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).ProductCategoryList(ctx, req.(*ProductCategoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryService_ProductCategoryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).ProductCategoryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductCategoryService/ProductCategoryUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).ProductCategoryUpdate(ctx, req.(*ProductCategoryUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryService_ProductCategoryDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).ProductCategoryDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductCategoryService/ProductCategoryDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).ProductCategoryDelete(ctx, req.(*ProductCategoryDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductCategoryService_ServiceDesc is the grpc.ServiceDesc for ProductCategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductCategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductCategoryService",
	HandlerType: (*ProductCategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProductCategoryAdd",
			Handler:    _ProductCategoryService_ProductCategoryAdd_Handler,
		},
		{
			MethodName: "ProductCategoryList",
			Handler:    _ProductCategoryService_ProductCategoryList_Handler,
		},
		{
			MethodName: "ProductCategoryUpdate",
			Handler:    _ProductCategoryService_ProductCategoryUpdate_Handler,
		},
		{
			MethodName: "ProductCategoryDelete",
			Handler:    _ProductCategoryService_ProductCategoryDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pms.proto",
}

// ProductFullReductionServiceClient is the client API for ProductFullReductionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductFullReductionServiceClient interface {
	ProductFullReductionAdd(ctx context.Context, in *ProductFullReductionAddReq, opts ...grpc.CallOption) (*ProductFullReductionAddResp, error)
	ProductFullReductionList(ctx context.Context, in *ProductFullReductionListReq, opts ...grpc.CallOption) (*ProductFullReductionListResp, error)
	ProductFullReductionUpdate(ctx context.Context, in *ProductFullReductionUpdateReq, opts ...grpc.CallOption) (*ProductFullReductionUpdateResp, error)
	ProductFullReductionDelete(ctx context.Context, in *ProductFullReductionDeleteReq, opts ...grpc.CallOption) (*ProductFullReductionDeleteResp, error)
}

type productFullReductionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductFullReductionServiceClient(cc grpc.ClientConnInterface) ProductFullReductionServiceClient {
	return &productFullReductionServiceClient{cc}
}

func (c *productFullReductionServiceClient) ProductFullReductionAdd(ctx context.Context, in *ProductFullReductionAddReq, opts ...grpc.CallOption) (*ProductFullReductionAddResp, error) {
	out := new(ProductFullReductionAddResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductFullReductionService/ProductFullReductionAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productFullReductionServiceClient) ProductFullReductionList(ctx context.Context, in *ProductFullReductionListReq, opts ...grpc.CallOption) (*ProductFullReductionListResp, error) {
	out := new(ProductFullReductionListResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductFullReductionService/ProductFullReductionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productFullReductionServiceClient) ProductFullReductionUpdate(ctx context.Context, in *ProductFullReductionUpdateReq, opts ...grpc.CallOption) (*ProductFullReductionUpdateResp, error) {
	out := new(ProductFullReductionUpdateResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductFullReductionService/ProductFullReductionUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productFullReductionServiceClient) ProductFullReductionDelete(ctx context.Context, in *ProductFullReductionDeleteReq, opts ...grpc.CallOption) (*ProductFullReductionDeleteResp, error) {
	out := new(ProductFullReductionDeleteResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductFullReductionService/ProductFullReductionDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductFullReductionServiceServer is the server API for ProductFullReductionService service.
// All implementations must embed UnimplementedProductFullReductionServiceServer
// for forward compatibility
type ProductFullReductionServiceServer interface {
	ProductFullReductionAdd(context.Context, *ProductFullReductionAddReq) (*ProductFullReductionAddResp, error)
	ProductFullReductionList(context.Context, *ProductFullReductionListReq) (*ProductFullReductionListResp, error)
	ProductFullReductionUpdate(context.Context, *ProductFullReductionUpdateReq) (*ProductFullReductionUpdateResp, error)
	ProductFullReductionDelete(context.Context, *ProductFullReductionDeleteReq) (*ProductFullReductionDeleteResp, error)
	mustEmbedUnimplementedProductFullReductionServiceServer()
}

// UnimplementedProductFullReductionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductFullReductionServiceServer struct {
}

func (UnimplementedProductFullReductionServiceServer) ProductFullReductionAdd(context.Context, *ProductFullReductionAddReq) (*ProductFullReductionAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductFullReductionAdd not implemented")
}
func (UnimplementedProductFullReductionServiceServer) ProductFullReductionList(context.Context, *ProductFullReductionListReq) (*ProductFullReductionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductFullReductionList not implemented")
}
func (UnimplementedProductFullReductionServiceServer) ProductFullReductionUpdate(context.Context, *ProductFullReductionUpdateReq) (*ProductFullReductionUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductFullReductionUpdate not implemented")
}
func (UnimplementedProductFullReductionServiceServer) ProductFullReductionDelete(context.Context, *ProductFullReductionDeleteReq) (*ProductFullReductionDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductFullReductionDelete not implemented")
}
func (UnimplementedProductFullReductionServiceServer) mustEmbedUnimplementedProductFullReductionServiceServer() {
}

// UnsafeProductFullReductionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductFullReductionServiceServer will
// result in compilation errors.
type UnsafeProductFullReductionServiceServer interface {
	mustEmbedUnimplementedProductFullReductionServiceServer()
}

func RegisterProductFullReductionServiceServer(s grpc.ServiceRegistrar, srv ProductFullReductionServiceServer) {
	s.RegisterService(&ProductFullReductionService_ServiceDesc, srv)
}

func _ProductFullReductionService_ProductFullReductionAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductFullReductionAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductFullReductionServiceServer).ProductFullReductionAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductFullReductionService/ProductFullReductionAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductFullReductionServiceServer).ProductFullReductionAdd(ctx, req.(*ProductFullReductionAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductFullReductionService_ProductFullReductionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductFullReductionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductFullReductionServiceServer).ProductFullReductionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductFullReductionService/ProductFullReductionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductFullReductionServiceServer).ProductFullReductionList(ctx, req.(*ProductFullReductionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductFullReductionService_ProductFullReductionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductFullReductionUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductFullReductionServiceServer).ProductFullReductionUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductFullReductionService/ProductFullReductionUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductFullReductionServiceServer).ProductFullReductionUpdate(ctx, req.(*ProductFullReductionUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductFullReductionService_ProductFullReductionDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductFullReductionDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductFullReductionServiceServer).ProductFullReductionDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductFullReductionService/ProductFullReductionDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductFullReductionServiceServer).ProductFullReductionDelete(ctx, req.(*ProductFullReductionDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductFullReductionService_ServiceDesc is the grpc.ServiceDesc for ProductFullReductionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductFullReductionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductFullReductionService",
	HandlerType: (*ProductFullReductionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProductFullReductionAdd",
			Handler:    _ProductFullReductionService_ProductFullReductionAdd_Handler,
		},
		{
			MethodName: "ProductFullReductionList",
			Handler:    _ProductFullReductionService_ProductFullReductionList_Handler,
		},
		{
			MethodName: "ProductFullReductionUpdate",
			Handler:    _ProductFullReductionService_ProductFullReductionUpdate_Handler,
		},
		{
			MethodName: "ProductFullReductionDelete",
			Handler:    _ProductFullReductionService_ProductFullReductionDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pms.proto",
}

// ProductLadderServiceClient is the client API for ProductLadderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductLadderServiceClient interface {
	ProductLadderAdd(ctx context.Context, in *ProductLadderAddReq, opts ...grpc.CallOption) (*ProductLadderAddResp, error)
	ProductLadderList(ctx context.Context, in *ProductLadderListReq, opts ...grpc.CallOption) (*ProductLadderListResp, error)
	ProductLadderUpdate(ctx context.Context, in *ProductLadderUpdateReq, opts ...grpc.CallOption) (*ProductLadderUpdateResp, error)
	ProductLadderDelete(ctx context.Context, in *ProductLadderDeleteReq, opts ...grpc.CallOption) (*ProductLadderDeleteResp, error)
}

type productLadderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductLadderServiceClient(cc grpc.ClientConnInterface) ProductLadderServiceClient {
	return &productLadderServiceClient{cc}
}

func (c *productLadderServiceClient) ProductLadderAdd(ctx context.Context, in *ProductLadderAddReq, opts ...grpc.CallOption) (*ProductLadderAddResp, error) {
	out := new(ProductLadderAddResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductLadderService/ProductLadderAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productLadderServiceClient) ProductLadderList(ctx context.Context, in *ProductLadderListReq, opts ...grpc.CallOption) (*ProductLadderListResp, error) {
	out := new(ProductLadderListResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductLadderService/ProductLadderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productLadderServiceClient) ProductLadderUpdate(ctx context.Context, in *ProductLadderUpdateReq, opts ...grpc.CallOption) (*ProductLadderUpdateResp, error) {
	out := new(ProductLadderUpdateResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductLadderService/ProductLadderUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productLadderServiceClient) ProductLadderDelete(ctx context.Context, in *ProductLadderDeleteReq, opts ...grpc.CallOption) (*ProductLadderDeleteResp, error) {
	out := new(ProductLadderDeleteResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductLadderService/ProductLadderDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductLadderServiceServer is the server API for ProductLadderService service.
// All implementations must embed UnimplementedProductLadderServiceServer
// for forward compatibility
type ProductLadderServiceServer interface {
	ProductLadderAdd(context.Context, *ProductLadderAddReq) (*ProductLadderAddResp, error)
	ProductLadderList(context.Context, *ProductLadderListReq) (*ProductLadderListResp, error)
	ProductLadderUpdate(context.Context, *ProductLadderUpdateReq) (*ProductLadderUpdateResp, error)
	ProductLadderDelete(context.Context, *ProductLadderDeleteReq) (*ProductLadderDeleteResp, error)
	mustEmbedUnimplementedProductLadderServiceServer()
}

// UnimplementedProductLadderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductLadderServiceServer struct {
}

func (UnimplementedProductLadderServiceServer) ProductLadderAdd(context.Context, *ProductLadderAddReq) (*ProductLadderAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductLadderAdd not implemented")
}
func (UnimplementedProductLadderServiceServer) ProductLadderList(context.Context, *ProductLadderListReq) (*ProductLadderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductLadderList not implemented")
}
func (UnimplementedProductLadderServiceServer) ProductLadderUpdate(context.Context, *ProductLadderUpdateReq) (*ProductLadderUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductLadderUpdate not implemented")
}
func (UnimplementedProductLadderServiceServer) ProductLadderDelete(context.Context, *ProductLadderDeleteReq) (*ProductLadderDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductLadderDelete not implemented")
}
func (UnimplementedProductLadderServiceServer) mustEmbedUnimplementedProductLadderServiceServer() {}

// UnsafeProductLadderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductLadderServiceServer will
// result in compilation errors.
type UnsafeProductLadderServiceServer interface {
	mustEmbedUnimplementedProductLadderServiceServer()
}

func RegisterProductLadderServiceServer(s grpc.ServiceRegistrar, srv ProductLadderServiceServer) {
	s.RegisterService(&ProductLadderService_ServiceDesc, srv)
}

func _ProductLadderService_ProductLadderAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductLadderAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductLadderServiceServer).ProductLadderAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductLadderService/ProductLadderAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductLadderServiceServer).ProductLadderAdd(ctx, req.(*ProductLadderAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductLadderService_ProductLadderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductLadderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductLadderServiceServer).ProductLadderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductLadderService/ProductLadderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductLadderServiceServer).ProductLadderList(ctx, req.(*ProductLadderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductLadderService_ProductLadderUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductLadderUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductLadderServiceServer).ProductLadderUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductLadderService/ProductLadderUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductLadderServiceServer).ProductLadderUpdate(ctx, req.(*ProductLadderUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductLadderService_ProductLadderDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductLadderDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductLadderServiceServer).ProductLadderDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductLadderService/ProductLadderDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductLadderServiceServer).ProductLadderDelete(ctx, req.(*ProductLadderDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductLadderService_ServiceDesc is the grpc.ServiceDesc for ProductLadderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductLadderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductLadderService",
	HandlerType: (*ProductLadderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProductLadderAdd",
			Handler:    _ProductLadderService_ProductLadderAdd_Handler,
		},
		{
			MethodName: "ProductLadderList",
			Handler:    _ProductLadderService_ProductLadderList_Handler,
		},
		{
			MethodName: "ProductLadderUpdate",
			Handler:    _ProductLadderService_ProductLadderUpdate_Handler,
		},
		{
			MethodName: "ProductLadderDelete",
			Handler:    _ProductLadderService_ProductLadderDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pms.proto",
}

// ProductOperateLogServiceClient is the client API for ProductOperateLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductOperateLogServiceClient interface {
	ProductOperateLogAdd(ctx context.Context, in *ProductOperateLogAddReq, opts ...grpc.CallOption) (*ProductOperateLogAddResp, error)
	ProductOperateLogList(ctx context.Context, in *ProductOperateLogListReq, opts ...grpc.CallOption) (*ProductOperateLogListResp, error)
	ProductOperateLogUpdate(ctx context.Context, in *ProductOperateLogUpdateReq, opts ...grpc.CallOption) (*ProductOperateLogUpdateResp, error)
	ProductOperateLogDelete(ctx context.Context, in *ProductOperateLogDeleteReq, opts ...grpc.CallOption) (*ProductOperateLogDeleteResp, error)
}

type productOperateLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductOperateLogServiceClient(cc grpc.ClientConnInterface) ProductOperateLogServiceClient {
	return &productOperateLogServiceClient{cc}
}

func (c *productOperateLogServiceClient) ProductOperateLogAdd(ctx context.Context, in *ProductOperateLogAddReq, opts ...grpc.CallOption) (*ProductOperateLogAddResp, error) {
	out := new(ProductOperateLogAddResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductOperateLogService/ProductOperateLogAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productOperateLogServiceClient) ProductOperateLogList(ctx context.Context, in *ProductOperateLogListReq, opts ...grpc.CallOption) (*ProductOperateLogListResp, error) {
	out := new(ProductOperateLogListResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductOperateLogService/ProductOperateLogList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productOperateLogServiceClient) ProductOperateLogUpdate(ctx context.Context, in *ProductOperateLogUpdateReq, opts ...grpc.CallOption) (*ProductOperateLogUpdateResp, error) {
	out := new(ProductOperateLogUpdateResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductOperateLogService/ProductOperateLogUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productOperateLogServiceClient) ProductOperateLogDelete(ctx context.Context, in *ProductOperateLogDeleteReq, opts ...grpc.CallOption) (*ProductOperateLogDeleteResp, error) {
	out := new(ProductOperateLogDeleteResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductOperateLogService/ProductOperateLogDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductOperateLogServiceServer is the server API for ProductOperateLogService service.
// All implementations must embed UnimplementedProductOperateLogServiceServer
// for forward compatibility
type ProductOperateLogServiceServer interface {
	ProductOperateLogAdd(context.Context, *ProductOperateLogAddReq) (*ProductOperateLogAddResp, error)
	ProductOperateLogList(context.Context, *ProductOperateLogListReq) (*ProductOperateLogListResp, error)
	ProductOperateLogUpdate(context.Context, *ProductOperateLogUpdateReq) (*ProductOperateLogUpdateResp, error)
	ProductOperateLogDelete(context.Context, *ProductOperateLogDeleteReq) (*ProductOperateLogDeleteResp, error)
	mustEmbedUnimplementedProductOperateLogServiceServer()
}

// UnimplementedProductOperateLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductOperateLogServiceServer struct {
}

func (UnimplementedProductOperateLogServiceServer) ProductOperateLogAdd(context.Context, *ProductOperateLogAddReq) (*ProductOperateLogAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductOperateLogAdd not implemented")
}
func (UnimplementedProductOperateLogServiceServer) ProductOperateLogList(context.Context, *ProductOperateLogListReq) (*ProductOperateLogListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductOperateLogList not implemented")
}
func (UnimplementedProductOperateLogServiceServer) ProductOperateLogUpdate(context.Context, *ProductOperateLogUpdateReq) (*ProductOperateLogUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductOperateLogUpdate not implemented")
}
func (UnimplementedProductOperateLogServiceServer) ProductOperateLogDelete(context.Context, *ProductOperateLogDeleteReq) (*ProductOperateLogDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductOperateLogDelete not implemented")
}
func (UnimplementedProductOperateLogServiceServer) mustEmbedUnimplementedProductOperateLogServiceServer() {
}

// UnsafeProductOperateLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductOperateLogServiceServer will
// result in compilation errors.
type UnsafeProductOperateLogServiceServer interface {
	mustEmbedUnimplementedProductOperateLogServiceServer()
}

func RegisterProductOperateLogServiceServer(s grpc.ServiceRegistrar, srv ProductOperateLogServiceServer) {
	s.RegisterService(&ProductOperateLogService_ServiceDesc, srv)
}

func _ProductOperateLogService_ProductOperateLogAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductOperateLogAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductOperateLogServiceServer).ProductOperateLogAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductOperateLogService/ProductOperateLogAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductOperateLogServiceServer).ProductOperateLogAdd(ctx, req.(*ProductOperateLogAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductOperateLogService_ProductOperateLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductOperateLogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductOperateLogServiceServer).ProductOperateLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductOperateLogService/ProductOperateLogList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductOperateLogServiceServer).ProductOperateLogList(ctx, req.(*ProductOperateLogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductOperateLogService_ProductOperateLogUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductOperateLogUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductOperateLogServiceServer).ProductOperateLogUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductOperateLogService/ProductOperateLogUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductOperateLogServiceServer).ProductOperateLogUpdate(ctx, req.(*ProductOperateLogUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductOperateLogService_ProductOperateLogDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductOperateLogDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductOperateLogServiceServer).ProductOperateLogDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductOperateLogService/ProductOperateLogDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductOperateLogServiceServer).ProductOperateLogDelete(ctx, req.(*ProductOperateLogDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductOperateLogService_ServiceDesc is the grpc.ServiceDesc for ProductOperateLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductOperateLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductOperateLogService",
	HandlerType: (*ProductOperateLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProductOperateLogAdd",
			Handler:    _ProductOperateLogService_ProductOperateLogAdd_Handler,
		},
		{
			MethodName: "ProductOperateLogList",
			Handler:    _ProductOperateLogService_ProductOperateLogList_Handler,
		},
		{
			MethodName: "ProductOperateLogUpdate",
			Handler:    _ProductOperateLogService_ProductOperateLogUpdate_Handler,
		},
		{
			MethodName: "ProductOperateLogDelete",
			Handler:    _ProductOperateLogService_ProductOperateLogDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pms.proto",
}

// ProductVertifyRecordServiceClient is the client API for ProductVertifyRecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductVertifyRecordServiceClient interface {
	ProductVertifyRecordAdd(ctx context.Context, in *ProductVertifyRecordAddReq, opts ...grpc.CallOption) (*ProductVertifyRecordAddResp, error)
	ProductVertifyRecordList(ctx context.Context, in *ProductVertifyRecordListReq, opts ...grpc.CallOption) (*ProductVertifyRecordListResp, error)
	ProductVertifyRecordUpdate(ctx context.Context, in *ProductVertifyRecordUpdateReq, opts ...grpc.CallOption) (*ProductVertifyRecordUpdateResp, error)
	ProductVertifyRecordDelete(ctx context.Context, in *ProductVertifyRecordDeleteReq, opts ...grpc.CallOption) (*ProductVertifyRecordDeleteResp, error)
}

type productVertifyRecordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductVertifyRecordServiceClient(cc grpc.ClientConnInterface) ProductVertifyRecordServiceClient {
	return &productVertifyRecordServiceClient{cc}
}

func (c *productVertifyRecordServiceClient) ProductVertifyRecordAdd(ctx context.Context, in *ProductVertifyRecordAddReq, opts ...grpc.CallOption) (*ProductVertifyRecordAddResp, error) {
	out := new(ProductVertifyRecordAddResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductVertifyRecordService/ProductVertifyRecordAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productVertifyRecordServiceClient) ProductVertifyRecordList(ctx context.Context, in *ProductVertifyRecordListReq, opts ...grpc.CallOption) (*ProductVertifyRecordListResp, error) {
	out := new(ProductVertifyRecordListResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductVertifyRecordService/ProductVertifyRecordList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productVertifyRecordServiceClient) ProductVertifyRecordUpdate(ctx context.Context, in *ProductVertifyRecordUpdateReq, opts ...grpc.CallOption) (*ProductVertifyRecordUpdateResp, error) {
	out := new(ProductVertifyRecordUpdateResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductVertifyRecordService/ProductVertifyRecordUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productVertifyRecordServiceClient) ProductVertifyRecordDelete(ctx context.Context, in *ProductVertifyRecordDeleteReq, opts ...grpc.CallOption) (*ProductVertifyRecordDeleteResp, error) {
	out := new(ProductVertifyRecordDeleteResp)
	err := c.cc.Invoke(ctx, "/pmsclient.ProductVertifyRecordService/ProductVertifyRecordDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductVertifyRecordServiceServer is the server API for ProductVertifyRecordService service.
// All implementations must embed UnimplementedProductVertifyRecordServiceServer
// for forward compatibility
type ProductVertifyRecordServiceServer interface {
	ProductVertifyRecordAdd(context.Context, *ProductVertifyRecordAddReq) (*ProductVertifyRecordAddResp, error)
	ProductVertifyRecordList(context.Context, *ProductVertifyRecordListReq) (*ProductVertifyRecordListResp, error)
	ProductVertifyRecordUpdate(context.Context, *ProductVertifyRecordUpdateReq) (*ProductVertifyRecordUpdateResp, error)
	ProductVertifyRecordDelete(context.Context, *ProductVertifyRecordDeleteReq) (*ProductVertifyRecordDeleteResp, error)
	mustEmbedUnimplementedProductVertifyRecordServiceServer()
}

// UnimplementedProductVertifyRecordServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductVertifyRecordServiceServer struct {
}

func (UnimplementedProductVertifyRecordServiceServer) ProductVertifyRecordAdd(context.Context, *ProductVertifyRecordAddReq) (*ProductVertifyRecordAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductVertifyRecordAdd not implemented")
}
func (UnimplementedProductVertifyRecordServiceServer) ProductVertifyRecordList(context.Context, *ProductVertifyRecordListReq) (*ProductVertifyRecordListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductVertifyRecordList not implemented")
}
func (UnimplementedProductVertifyRecordServiceServer) ProductVertifyRecordUpdate(context.Context, *ProductVertifyRecordUpdateReq) (*ProductVertifyRecordUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductVertifyRecordUpdate not implemented")
}
func (UnimplementedProductVertifyRecordServiceServer) ProductVertifyRecordDelete(context.Context, *ProductVertifyRecordDeleteReq) (*ProductVertifyRecordDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductVertifyRecordDelete not implemented")
}
func (UnimplementedProductVertifyRecordServiceServer) mustEmbedUnimplementedProductVertifyRecordServiceServer() {
}

// UnsafeProductVertifyRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductVertifyRecordServiceServer will
// result in compilation errors.
type UnsafeProductVertifyRecordServiceServer interface {
	mustEmbedUnimplementedProductVertifyRecordServiceServer()
}

func RegisterProductVertifyRecordServiceServer(s grpc.ServiceRegistrar, srv ProductVertifyRecordServiceServer) {
	s.RegisterService(&ProductVertifyRecordService_ServiceDesc, srv)
}

func _ProductVertifyRecordService_ProductVertifyRecordAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductVertifyRecordAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductVertifyRecordServiceServer).ProductVertifyRecordAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductVertifyRecordService/ProductVertifyRecordAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductVertifyRecordServiceServer).ProductVertifyRecordAdd(ctx, req.(*ProductVertifyRecordAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductVertifyRecordService_ProductVertifyRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductVertifyRecordListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductVertifyRecordServiceServer).ProductVertifyRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductVertifyRecordService/ProductVertifyRecordList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductVertifyRecordServiceServer).ProductVertifyRecordList(ctx, req.(*ProductVertifyRecordListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductVertifyRecordService_ProductVertifyRecordUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductVertifyRecordUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductVertifyRecordServiceServer).ProductVertifyRecordUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductVertifyRecordService/ProductVertifyRecordUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductVertifyRecordServiceServer).ProductVertifyRecordUpdate(ctx, req.(*ProductVertifyRecordUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductVertifyRecordService_ProductVertifyRecordDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductVertifyRecordDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductVertifyRecordServiceServer).ProductVertifyRecordDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.ProductVertifyRecordService/ProductVertifyRecordDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductVertifyRecordServiceServer).ProductVertifyRecordDelete(ctx, req.(*ProductVertifyRecordDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductVertifyRecordService_ServiceDesc is the grpc.ServiceDesc for ProductVertifyRecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductVertifyRecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.ProductVertifyRecordService",
	HandlerType: (*ProductVertifyRecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProductVertifyRecordAdd",
			Handler:    _ProductVertifyRecordService_ProductVertifyRecordAdd_Handler,
		},
		{
			MethodName: "ProductVertifyRecordList",
			Handler:    _ProductVertifyRecordService_ProductVertifyRecordList_Handler,
		},
		{
			MethodName: "ProductVertifyRecordUpdate",
			Handler:    _ProductVertifyRecordService_ProductVertifyRecordUpdate_Handler,
		},
		{
			MethodName: "ProductVertifyRecordDelete",
			Handler:    _ProductVertifyRecordService_ProductVertifyRecordDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pms.proto",
}

// SkuStockServiceClient is the client API for SkuStockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SkuStockServiceClient interface {
	SkuStockAdd(ctx context.Context, in *SkuStockAddReq, opts ...grpc.CallOption) (*SkuStockAddResp, error)
	SkuStockList(ctx context.Context, in *SkuStockListReq, opts ...grpc.CallOption) (*SkuStockListResp, error)
	SkuStockUpdate(ctx context.Context, in *SkuStockUpdateReq, opts ...grpc.CallOption) (*SkuStockUpdateResp, error)
	SkuStockDelete(ctx context.Context, in *SkuStockDeleteReq, opts ...grpc.CallOption) (*SkuStockDeleteResp, error)
}

type skuStockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSkuStockServiceClient(cc grpc.ClientConnInterface) SkuStockServiceClient {
	return &skuStockServiceClient{cc}
}

func (c *skuStockServiceClient) SkuStockAdd(ctx context.Context, in *SkuStockAddReq, opts ...grpc.CallOption) (*SkuStockAddResp, error) {
	out := new(SkuStockAddResp)
	err := c.cc.Invoke(ctx, "/pmsclient.SkuStockService/SkuStockAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skuStockServiceClient) SkuStockList(ctx context.Context, in *SkuStockListReq, opts ...grpc.CallOption) (*SkuStockListResp, error) {
	out := new(SkuStockListResp)
	err := c.cc.Invoke(ctx, "/pmsclient.SkuStockService/SkuStockList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skuStockServiceClient) SkuStockUpdate(ctx context.Context, in *SkuStockUpdateReq, opts ...grpc.CallOption) (*SkuStockUpdateResp, error) {
	out := new(SkuStockUpdateResp)
	err := c.cc.Invoke(ctx, "/pmsclient.SkuStockService/SkuStockUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skuStockServiceClient) SkuStockDelete(ctx context.Context, in *SkuStockDeleteReq, opts ...grpc.CallOption) (*SkuStockDeleteResp, error) {
	out := new(SkuStockDeleteResp)
	err := c.cc.Invoke(ctx, "/pmsclient.SkuStockService/SkuStockDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SkuStockServiceServer is the server API for SkuStockService service.
// All implementations must embed UnimplementedSkuStockServiceServer
// for forward compatibility
type SkuStockServiceServer interface {
	SkuStockAdd(context.Context, *SkuStockAddReq) (*SkuStockAddResp, error)
	SkuStockList(context.Context, *SkuStockListReq) (*SkuStockListResp, error)
	SkuStockUpdate(context.Context, *SkuStockUpdateReq) (*SkuStockUpdateResp, error)
	SkuStockDelete(context.Context, *SkuStockDeleteReq) (*SkuStockDeleteResp, error)
	mustEmbedUnimplementedSkuStockServiceServer()
}

// UnimplementedSkuStockServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSkuStockServiceServer struct {
}

func (UnimplementedSkuStockServiceServer) SkuStockAdd(context.Context, *SkuStockAddReq) (*SkuStockAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkuStockAdd not implemented")
}
func (UnimplementedSkuStockServiceServer) SkuStockList(context.Context, *SkuStockListReq) (*SkuStockListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkuStockList not implemented")
}
func (UnimplementedSkuStockServiceServer) SkuStockUpdate(context.Context, *SkuStockUpdateReq) (*SkuStockUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkuStockUpdate not implemented")
}
func (UnimplementedSkuStockServiceServer) SkuStockDelete(context.Context, *SkuStockDeleteReq) (*SkuStockDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkuStockDelete not implemented")
}
func (UnimplementedSkuStockServiceServer) mustEmbedUnimplementedSkuStockServiceServer() {}

// UnsafeSkuStockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SkuStockServiceServer will
// result in compilation errors.
type UnsafeSkuStockServiceServer interface {
	mustEmbedUnimplementedSkuStockServiceServer()
}

func RegisterSkuStockServiceServer(s grpc.ServiceRegistrar, srv SkuStockServiceServer) {
	s.RegisterService(&SkuStockService_ServiceDesc, srv)
}

func _SkuStockService_SkuStockAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkuStockAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkuStockServiceServer).SkuStockAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.SkuStockService/SkuStockAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkuStockServiceServer).SkuStockAdd(ctx, req.(*SkuStockAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkuStockService_SkuStockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkuStockListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkuStockServiceServer).SkuStockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.SkuStockService/SkuStockList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkuStockServiceServer).SkuStockList(ctx, req.(*SkuStockListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkuStockService_SkuStockUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkuStockUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkuStockServiceServer).SkuStockUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.SkuStockService/SkuStockUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkuStockServiceServer).SkuStockUpdate(ctx, req.(*SkuStockUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkuStockService_SkuStockDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkuStockDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkuStockServiceServer).SkuStockDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pmsclient.SkuStockService/SkuStockDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkuStockServiceServer).SkuStockDelete(ctx, req.(*SkuStockDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SkuStockService_ServiceDesc is the grpc.ServiceDesc for SkuStockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SkuStockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmsclient.SkuStockService",
	HandlerType: (*SkuStockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SkuStockAdd",
			Handler:    _SkuStockService_SkuStockAdd_Handler,
		},
		{
			MethodName: "SkuStockList",
			Handler:    _SkuStockService_SkuStockList_Handler,
		},
		{
			MethodName: "SkuStockUpdate",
			Handler:    _SkuStockService_SkuStockUpdate_Handler,
		},
		{
			MethodName: "SkuStockDelete",
			Handler:    _SkuStockService_SkuStockDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pms.proto",
}
