// Code generated by goctl. DO NOT EDIT.

package mmqmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	mmqMessageFieldNames          = builder.RawFieldNames(&MmqMessage{})
	mmqMessageRows                = strings.Join(mmqMessageFieldNames, ",")
	mmqMessageRowsExpectAutoSet   = strings.Join(stringx.Remove(mmqMessageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	mmqMessageRowsWithPlaceHolder = strings.Join(stringx.Remove(mmqMessageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	mmqMessageModel interface {
		Insert(ctx context.Context, data *MmqMessage) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*MmqMessage, error)
		Update(ctx context.Context, data *MmqMessage) error
		Delete(ctx context.Context, id int64) error
	}

	defaultMmqMessageModel struct {
		conn  sqlx.SqlConn
		table string
	}

	MmqMessage struct {
		Id        int64  `db:"id"`
		Name      string `db:"name"`       // 报警标题
		Image     string `db:"image"`      // 报警截图
		Type      int64  `db:"type"`       // 消息类型:0-发现人员 1-車輛 2-入侵 3-烟火 4-
		Code      string `db:"code"`       // 系统分类二级类别
		Level     int64  `db:"level"`      // 预警等级
		Count     int64  `db:"count"`      // 报警数量
		Platform  int64  `db:"platform"`   // 使用平台：0-全部 1-飞机 2-摄像头;3-机库;4-AI
		StartTime string `db:"start_time"` // 开始时间
		EndTime   string `db:"end_time"`   // 结束时间
		Note      string `db:"note"`       // 备注
		Confirm   int64  `db:"confirm"`    // 报警确认
	}
)

func newMmqMessageModel(conn sqlx.SqlConn) *defaultMmqMessageModel {
	return &defaultMmqMessageModel{
		conn:  conn,
		table: "`mmq_message`",
	}
}

func (m *defaultMmqMessageModel) withSession(session sqlx.Session) *defaultMmqMessageModel {
	return &defaultMmqMessageModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`mmq_message`",
	}
}

func (m *defaultMmqMessageModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultMmqMessageModel) FindOne(ctx context.Context, id int64) (*MmqMessage, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", mmqMessageRows, m.table)
	var resp MmqMessage
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMmqMessageModel) Insert(ctx context.Context, data *MmqMessage) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, mmqMessageRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Image, data.Type, data.Code, data.Level, data.Count, data.Platform, data.StartTime, data.EndTime, data.Note, data.Confirm)
	return ret, err
}

func (m *defaultMmqMessageModel) Update(ctx context.Context, data *MmqMessage) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, mmqMessageRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Image, data.Type, data.Code, data.Level, data.Count, data.Platform, data.StartTime, data.EndTime, data.Note, data.Confirm, data.Id)
	return err
}

func (m *defaultMmqMessageModel) tableName() string {
	return m.table
}
