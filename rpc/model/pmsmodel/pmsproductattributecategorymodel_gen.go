// Code generated by goctl. DO NOT EDIT.

package pmsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pmsProductAttributeCategoryFieldNames          = builder.RawFieldNames(&PmsProductAttributeCategory{})
	pmsProductAttributeCategoryRows                = strings.Join(pmsProductAttributeCategoryFieldNames, ",")
	pmsProductAttributeCategoryRowsExpectAutoSet   = strings.Join(stringx.Remove(pmsProductAttributeCategoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	pmsProductAttributeCategoryRowsWithPlaceHolder = strings.Join(stringx.Remove(pmsProductAttributeCategoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	pmsProductAttributeCategoryModel interface {
		Insert(ctx context.Context, data *PmsProductAttributeCategory) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PmsProductAttributeCategory, error)
		Update(ctx context.Context, data *PmsProductAttributeCategory) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPmsProductAttributeCategoryModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PmsProductAttributeCategory struct {
		Id             int64  `db:"id"`
		Name           string `db:"name"`
		AttributeCount int64  `db:"attribute_count"` // 属性数量
		ParamCount     int64  `db:"param_count"`     // 参数数量
	}
)

func newPmsProductAttributeCategoryModel(conn sqlx.SqlConn) *defaultPmsProductAttributeCategoryModel {
	return &defaultPmsProductAttributeCategoryModel{
		conn:  conn,
		table: "`pms_product_attribute_category`",
	}
}

func (m *defaultPmsProductAttributeCategoryModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPmsProductAttributeCategoryModel) FindOne(ctx context.Context, id int64) (*PmsProductAttributeCategory, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pmsProductAttributeCategoryRows, m.table)
	var resp PmsProductAttributeCategory
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPmsProductAttributeCategoryModel) Insert(ctx context.Context, data *PmsProductAttributeCategory) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, pmsProductAttributeCategoryRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.AttributeCount, data.ParamCount)
	return ret, err
}

func (m *defaultPmsProductAttributeCategoryModel) Update(ctx context.Context, data *PmsProductAttributeCategory) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pmsProductAttributeCategoryRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.AttributeCount, data.ParamCount, data.Id)
	return err
}

func (m *defaultPmsProductAttributeCategoryModel) tableName() string {
	return m.table
}
