// Code generated by goctl. DO NOT EDIT.

package pmsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pmsAlbumFieldNames          = builder.RawFieldNames(&PmsAlbum{})
	pmsAlbumRows                = strings.Join(pmsAlbumFieldNames, ",")
	pmsAlbumRowsExpectAutoSet   = strings.Join(stringx.Remove(pmsAlbumFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	pmsAlbumRowsWithPlaceHolder = strings.Join(stringx.Remove(pmsAlbumFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	pmsAlbumModel interface {
		Insert(ctx context.Context, data *PmsAlbum) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PmsAlbum, error)
		Update(ctx context.Context, data *PmsAlbum) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPmsAlbumModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PmsAlbum struct {
		Id          int64  `db:"id"`
		Name        string `db:"name"`
		CoverPic    string `db:"cover_pic"`
		PicCount    int64  `db:"pic_count"`
		Sort        int64  `db:"sort"`
		Description string `db:"description"`
	}
)

func newPmsAlbumModel(conn sqlx.SqlConn) *defaultPmsAlbumModel {
	return &defaultPmsAlbumModel{
		conn:  conn,
		table: "`pms_album`",
	}
}

func (m *defaultPmsAlbumModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPmsAlbumModel) FindOne(ctx context.Context, id int64) (*PmsAlbum, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pmsAlbumRows, m.table)
	var resp PmsAlbum
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPmsAlbumModel) Insert(ctx context.Context, data *PmsAlbum) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, pmsAlbumRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.CoverPic, data.PicCount, data.Sort, data.Description)
	return ret, err
}

func (m *defaultPmsAlbumModel) Update(ctx context.Context, data *PmsAlbum) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pmsAlbumRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.CoverPic, data.PicCount, data.Sort, data.Description, data.Id)
	return err
}

func (m *defaultPmsAlbumModel) tableName() string {
	return m.table
}
