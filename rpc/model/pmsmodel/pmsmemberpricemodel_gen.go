// Code generated by goctl. DO NOT EDIT.

package pmsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pmsMemberPriceFieldNames          = builder.RawFieldNames(&PmsMemberPrice{})
	pmsMemberPriceRows                = strings.Join(pmsMemberPriceFieldNames, ",")
	pmsMemberPriceRowsExpectAutoSet   = strings.Join(stringx.Remove(pmsMemberPriceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	pmsMemberPriceRowsWithPlaceHolder = strings.Join(stringx.Remove(pmsMemberPriceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	pmsMemberPriceModel interface {
		Insert(ctx context.Context, data *PmsMemberPrice) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PmsMemberPrice, error)
		Update(ctx context.Context, data *PmsMemberPrice) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPmsMemberPriceModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PmsMemberPrice struct {
		Id              int64   `db:"id"`
		ProductId       int64   `db:"product_id"`
		MemberLevelId   int64   `db:"member_level_id"`
		MemberPrice     float64 `db:"member_price"` // 会员价格
		MemberLevelName string  `db:"member_level_name"`
	}
)

func newPmsMemberPriceModel(conn sqlx.SqlConn) *defaultPmsMemberPriceModel {
	return &defaultPmsMemberPriceModel{
		conn:  conn,
		table: "`pms_member_price`",
	}
}

func (m *defaultPmsMemberPriceModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPmsMemberPriceModel) FindOne(ctx context.Context, id int64) (*PmsMemberPrice, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pmsMemberPriceRows, m.table)
	var resp PmsMemberPrice
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPmsMemberPriceModel) Insert(ctx context.Context, data *PmsMemberPrice) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, pmsMemberPriceRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ProductId, data.MemberLevelId, data.MemberPrice, data.MemberLevelName)
	return ret, err
}

func (m *defaultPmsMemberPriceModel) Update(ctx context.Context, data *PmsMemberPrice) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pmsMemberPriceRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ProductId, data.MemberLevelId, data.MemberPrice, data.MemberLevelName, data.Id)
	return err
}

func (m *defaultPmsMemberPriceModel) tableName() string {
	return m.table
}
