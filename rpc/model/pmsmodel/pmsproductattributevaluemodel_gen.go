// Code generated by goctl. DO NOT EDIT.

package pmsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pmsProductAttributeValueFieldNames          = builder.RawFieldNames(&PmsProductAttributeValue{})
	pmsProductAttributeValueRows                = strings.Join(pmsProductAttributeValueFieldNames, ",")
	pmsProductAttributeValueRowsExpectAutoSet   = strings.Join(stringx.Remove(pmsProductAttributeValueFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	pmsProductAttributeValueRowsWithPlaceHolder = strings.Join(stringx.Remove(pmsProductAttributeValueFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	pmsProductAttributeValueModel interface {
		Insert(ctx context.Context, data *PmsProductAttributeValue) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PmsProductAttributeValue, error)
		Update(ctx context.Context, data *PmsProductAttributeValue) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPmsProductAttributeValueModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PmsProductAttributeValue struct {
		Id                 int64          `db:"id"`
		ProductId          int64          `db:"product_id"`
		ProductAttributeId int64          `db:"product_attribute_id"`
		Value              sql.NullString `db:"value"` // 手动添加规格或参数的值，参数单值，规格有多个时以逗号隔开
	}
)

func newPmsProductAttributeValueModel(conn sqlx.SqlConn) *defaultPmsProductAttributeValueModel {
	return &defaultPmsProductAttributeValueModel{
		conn:  conn,
		table: "`pms_product_attribute_value`",
	}
}

func (m *defaultPmsProductAttributeValueModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPmsProductAttributeValueModel) FindOne(ctx context.Context, id int64) (*PmsProductAttributeValue, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pmsProductAttributeValueRows, m.table)
	var resp PmsProductAttributeValue
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPmsProductAttributeValueModel) Insert(ctx context.Context, data *PmsProductAttributeValue) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, pmsProductAttributeValueRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ProductId, data.ProductAttributeId, data.Value)
	return ret, err
}

func (m *defaultPmsProductAttributeValueModel) Update(ctx context.Context, data *PmsProductAttributeValue) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pmsProductAttributeValueRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ProductId, data.ProductAttributeId, data.Value, data.Id)
	return err
}

func (m *defaultPmsProductAttributeValueModel) tableName() string {
	return m.table
}
