// Code generated by goctl. DO NOT EDIT.

package uavmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	uavCarFieldNames          = builder.RawFieldNames(&UavCar{})
	uavCarRows                = strings.Join(uavCarFieldNames, ",")
	uavCarRowsExpectAutoSet   = strings.Join(stringx.Remove(uavCarFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	uavCarRowsWithPlaceHolder = strings.Join(stringx.Remove(uavCarFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	uavCarModel interface {
		Insert(ctx context.Context, data *UavCar) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UavCar, error)
		Update(ctx context.Context, data *UavCar) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUavCarModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UavCar struct {
		Id         int64     `db:"id"`          // 编号
		Name       string    `db:"name"`        // 人名称
		Card       string    `db:"card"`        // 车牌号
		Photo      string    `db:"photo"`       // 车辆照片
		Type       int64     `db:"type"`        // 等级分类 人员等级 本部,0，外来 1，工程 1
		Phone      string    `db:"phone"`       // 手机号码
		Status     int64     `db:"status"`      //  帐号启用状态:0->禁用；1->启用
		Agency     string    `db:"agency"`      //   所属机构名称
		CreateTime time.Time `db:"create_time"` // 注册时间
	}
)

func newUavCarModel(conn sqlx.SqlConn) *defaultUavCarModel {
	return &defaultUavCarModel{
		conn:  conn,
		table: "`uav_car`",
	}
}

func (m *defaultUavCarModel) withSession(session sqlx.Session) *defaultUavCarModel {
	return &defaultUavCarModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`uav_car`",
	}
}

func (m *defaultUavCarModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUavCarModel) FindOne(ctx context.Context, id int64) (*UavCar, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", uavCarRows, m.table)
	var resp UavCar
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUavCarModel) Insert(ctx context.Context, data *UavCar) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, uavCarRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Card, data.Photo, data.Type, data.Phone, data.Status, data.Agency)
	return ret, err
}

func (m *defaultUavCarModel) Update(ctx context.Context, data *UavCar) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, uavCarRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Card, data.Photo, data.Type, data.Phone, data.Status, data.Agency, data.Id)
	return err
}

func (m *defaultUavCarModel) tableName() string {
	return m.table
}
