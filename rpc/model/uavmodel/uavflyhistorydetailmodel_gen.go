// Code generated by goctl. DO NOT EDIT.

package uavmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	uavFlyHistoryDetailFieldNames          = builder.RawFieldNames(&UavFlyHistoryDetail{})
	uavFlyHistoryDetailRows                = strings.Join(uavFlyHistoryDetailFieldNames, ",")
	uavFlyHistoryDetailRowsExpectAutoSet   = strings.Join(stringx.Remove(uavFlyHistoryDetailFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	uavFlyHistoryDetailRowsWithPlaceHolder = strings.Join(stringx.Remove(uavFlyHistoryDetailFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	uavFlyHistoryDetailModel interface {
		Insert(ctx context.Context, data *UavFlyHistoryDetail) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UavFlyHistoryDetail, error)
		Update(ctx context.Context, data *UavFlyHistoryDetail) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUavFlyHistoryDetailModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UavFlyHistoryDetail struct {
		Id          int64     `db:"id"`           // 编号
		HistoryId   int64     `db:"history_id"`   // 飞行id
		Temp        int64     `db:"temp"`         // 温度
		Eng         int64     `db:"eng"`          // 功耗
		V           float64   `db:"v"`            // 电压
		A           float64   `db:"a"`            // 电流
		StayTime    float64   `db:"stay_time"`    // 悬停时间
		GpsStars    int64     `db:"gps_stars"`    // GPS星数
		TowardAngle float64   `db:"toward_angle"` // 方向角
		Lat         float64   `db:"lat"`          // 纬度
		Lon         float64   `db:"lon"`          // 经度
		Staus       int64     `db:"staus"`        // 状态
		Height      float64   `db:"height"`       // 高度
		Speed       float64   `db:"speed"`        // 速度
		RelHeight   float64   `db:"rel_height"`   // 相对原点高度
		RealHeight  float64   `db:"real_height"`  // 实时距地高度
		Current     time.Time `db:"current"`      // 当前时间
	}
)

func newUavFlyHistoryDetailModel(conn sqlx.SqlConn) *defaultUavFlyHistoryDetailModel {
	return &defaultUavFlyHistoryDetailModel{
		conn:  conn,
		table: "`uav_fly_history_detail`",
	}
}

func (m *defaultUavFlyHistoryDetailModel) withSession(session sqlx.Session) *defaultUavFlyHistoryDetailModel {
	return &defaultUavFlyHistoryDetailModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`uav_fly_history_detail`",
	}
}

func (m *defaultUavFlyHistoryDetailModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUavFlyHistoryDetailModel) FindOne(ctx context.Context, id int64) (*UavFlyHistoryDetail, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", uavFlyHistoryDetailRows, m.table)
	var resp UavFlyHistoryDetail
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUavFlyHistoryDetailModel) Insert(ctx context.Context, data *UavFlyHistoryDetail) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, uavFlyHistoryDetailRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.HistoryId, data.Temp, data.Eng, data.V, data.A, data.StayTime, data.GpsStars, data.TowardAngle, data.Lat, data.Lon, data.Staus, data.Height, data.Speed, data.RelHeight, data.RealHeight, data.Current)
	return ret, err
}

func (m *defaultUavFlyHistoryDetailModel) Update(ctx context.Context, data *UavFlyHistoryDetail) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, uavFlyHistoryDetailRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.HistoryId, data.Temp, data.Eng, data.V, data.A, data.StayTime, data.GpsStars, data.TowardAngle, data.Lat, data.Lon, data.Staus, data.Height, data.Speed, data.RelHeight, data.RealHeight, data.Current, data.Id)
	return err
}

func (m *defaultUavFlyHistoryDetailModel) tableName() string {
	return m.table
}
