// Code generated by goctl. DO NOT EDIT.

package uavmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	uavNetworkFieldNames          = builder.RawFieldNames(&UavNetwork{})
	uavNetworkRows                = strings.Join(uavNetworkFieldNames, ",")
	uavNetworkRowsExpectAutoSet   = strings.Join(stringx.Remove(uavNetworkFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	uavNetworkRowsWithPlaceHolder = strings.Join(stringx.Remove(uavNetworkFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	uavNetworkModel interface {
		Insert(ctx context.Context, data *UavNetwork) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UavNetwork, error)
		Update(ctx context.Context, data *UavNetwork) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUavNetworkModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UavNetwork struct {
		Id         int64     `db:"id"`          // 网络频段
		Name       string    `db:"name"`        // 网络频段名称
		Band       int64     `db:"band"`        // 频段信息
		Type       int64     `db:"type"`        // 频段类型
		CreateTime time.Time `db:"create_time"` // 飞行开始时间
	}
)

func newUavNetworkModel(conn sqlx.SqlConn) *defaultUavNetworkModel {
	return &defaultUavNetworkModel{
		conn:  conn,
		table: "`uav_network`",
	}
}

func (m *defaultUavNetworkModel) withSession(session sqlx.Session) *defaultUavNetworkModel {
	return &defaultUavNetworkModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`uav_network`",
	}
}

func (m *defaultUavNetworkModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUavNetworkModel) FindOne(ctx context.Context, id int64) (*UavNetwork, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", uavNetworkRows, m.table)
	var resp UavNetwork
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUavNetworkModel) Insert(ctx context.Context, data *UavNetwork) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, uavNetworkRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Band, data.Type)
	return ret, err
}

func (m *defaultUavNetworkModel) Update(ctx context.Context, data *UavNetwork) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, uavNetworkRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Band, data.Type, data.Id)
	return err
}

func (m *defaultUavNetworkModel) tableName() string {
	return m.table
}
