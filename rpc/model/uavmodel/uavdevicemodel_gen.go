// Code generated by goctl. DO NOT EDIT.

package uavmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	uavDeviceFieldNames          = builder.RawFieldNames(&UavDevice{})
	uavDeviceRows                = strings.Join(uavDeviceFieldNames, ",")
	uavDeviceRowsExpectAutoSet   = strings.Join(stringx.Remove(uavDeviceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	uavDeviceRowsWithPlaceHolder = strings.Join(stringx.Remove(uavDeviceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	uavDeviceModel interface {
		Insert(ctx context.Context, data *UavDevice) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UavDevice, error)
		Update(ctx context.Context, data *UavDevice) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUavDeviceModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UavDevice struct {
		Id          int64     `db:"id"`           // 无人机id
		Name        string    `db:"name"`         // 无人机名称
		Ip          string    `db:"ip"`           // 无人机IP
		Port        int64     `db:"port"`         // 无人机port
		UavZubo     int64     `db:"uav_zubo"`     //  无人机:0->单播；1->组播
		RPort       int64     `db:"r_port"`       // 无人机接收端口port
		HangarIp    string    `db:"hangar_ip"`    // 无人机机库IP
		HangarPort  int64     `db:"hangar_port"`  // 无人机机库port
		HangarRport int64     `db:"hangar_rport"` // 无人机机库接收port
		HangarZubo  int64     `db:"hangar_zubo"`  //  机库:0->单播；1->组播
		CamIp       string    `db:"cam_ip"`       // 摄像头IP
		CamPort     int64     `db:"cam_port"`     // 摄像头port
		CamZubo     int64     `db:"cam_zubo"`     //  摄像头:0->单播；1->组播
		CamUrl      string    `db:"cam_url"`      // 摄像头rtsp 地址
		CreateTime  time.Time `db:"create_time"`  // 创建时间
		Network     string    `db:"network"`      // 网卡配置
		Joystick    string    `db:"joystick"`     // 手柄配置
		Status      int64     `db:"status"`       //  帐号启用状态:0->禁用；1->启用
	}
)

func newUavDeviceModel(conn sqlx.SqlConn) *defaultUavDeviceModel {
	return &defaultUavDeviceModel{
		conn:  conn,
		table: "`uav_device`",
	}
}

func (m *defaultUavDeviceModel) withSession(session sqlx.Session) *defaultUavDeviceModel {
	return &defaultUavDeviceModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`uav_device`",
	}
}

func (m *defaultUavDeviceModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUavDeviceModel) FindOne(ctx context.Context, id int64) (*UavDevice, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", uavDeviceRows, m.table)
	var resp UavDevice
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUavDeviceModel) Insert(ctx context.Context, data *UavDevice) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, uavDeviceRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Ip, data.Port, data.UavZubo, data.RPort, data.HangarIp, data.HangarPort, data.HangarRport, data.HangarZubo, data.CamIp, data.CamPort, data.CamZubo, data.CamUrl, data.Network, data.Joystick, data.Status)
	return ret, err
}

func (m *defaultUavDeviceModel) Update(ctx context.Context, data *UavDevice) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, uavDeviceRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Ip, data.Port, data.UavZubo, data.RPort, data.HangarIp, data.HangarPort, data.HangarRport, data.HangarZubo, data.CamIp, data.CamPort, data.CamZubo, data.CamUrl, data.Network, data.Joystick, data.Status, data.Id)
	return err
}

func (m *defaultUavDeviceModel) tableName() string {
	return m.table
}
