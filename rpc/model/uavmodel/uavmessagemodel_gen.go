// Code generated by goctl. DO NOT EDIT.

package uavmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	uavMessageFieldNames          = builder.RawFieldNames(&UavMessage{})
	uavMessageRows                = strings.Join(uavMessageFieldNames, ",")
	uavMessageRowsExpectAutoSet   = strings.Join(stringx.Remove(uavMessageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	uavMessageRowsWithPlaceHolder = strings.Join(stringx.Remove(uavMessageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	uavMessageModel interface {
		Insert(ctx context.Context, data *UavMessage) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UavMessage, error)
		Update(ctx context.Context, data *UavMessage) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUavMessageModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UavMessage struct {
		Id         int64     `db:"id"`
		Name       string    `db:"name"`        // 报警标题
		Image      string    `db:"image"`       // 报警截图
		Type       int64     `db:"type"`        // 消息类型:0-发现人员 1-車輛 2-入侵 3-烟火 4-
		Code       string    `db:"code"`        // 系统分类二级类别
		Level      int64     `db:"level"`       // 预警等级
		Count      int64     `db:"count"`       // 报警数量
		Platform   int64     `db:"platform"`    // 使用平台：0-全部 1-飞机 2-摄像头;3-机库;4-AI
		Lat        float64   `db:"lat"`         // 经度
		Lon        float64   `db:"lon"`         // 纬度
		Alt        float64   `db:"alt"`         // 高度
		CreateTime time.Time `db:"create_time"` // 开始时间
		
		Note       string    `db:"note"`        // 备注
		HistoryId  int64     `db:"history_id"`  // 巡检历史ID
		Confirm    int64     `db:"confirm"`     // 报警确认
	}
)

func newUavMessageModel(conn sqlx.SqlConn) *defaultUavMessageModel {
	return &defaultUavMessageModel{
		conn:  conn,
		table: "`uav_message`",
	}
}

func (m *defaultUavMessageModel) withSession(session sqlx.Session) *defaultUavMessageModel {
	return &defaultUavMessageModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`uav_message`",
	}
}

func (m *defaultUavMessageModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUavMessageModel) FindOne(ctx context.Context, id int64) (*UavMessage, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", uavMessageRows, m.table)
	var resp UavMessage
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUavMessageModel) Insert(ctx context.Context, data *UavMessage) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, uavMessageRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Image, data.Type, data.Code, data.Level, data.Count, data.Platform, data.Lat, data.Lon, data.Alt, data.Note, data.HistoryId, data.Confirm)
	return ret, err
}

func (m *defaultUavMessageModel) Update(ctx context.Context, data *UavMessage) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, uavMessageRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Image, data.Type, data.Code, data.Level, data.Count, data.Platform, data.Lat, data.Lon, data.Alt, data.Note, data.HistoryId, data.Confirm, data.Id)
	return err
}

func (m *defaultUavMessageModel) tableName() string {
	return m.table
}
