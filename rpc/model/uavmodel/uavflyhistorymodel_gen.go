// Code generated by goctl. DO NOT EDIT.

package uavmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	uavFlyHistoryFieldNames          = builder.RawFieldNames(&UavFlyHistory{})
	uavFlyHistoryRows                = strings.Join(uavFlyHistoryFieldNames, ",")
	uavFlyHistoryRowsExpectAutoSet   = strings.Join(stringx.Remove(uavFlyHistoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	uavFlyHistoryRowsWithPlaceHolder = strings.Join(stringx.Remove(uavFlyHistoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	uavFlyHistoryModel interface {
		Insert(ctx context.Context, data *UavFlyHistory) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UavFlyHistory, error)
		Update(ctx context.Context, data *UavFlyHistory) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUavFlyHistoryModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UavFlyHistory struct {
		Id         int64     `db:"id"`          // 编号
		UavId      int64     `db:"uav_id"`      // 无人机id
		UavName    string    `db:"uav_name"`    // 无人机名称
		FlyId      int64     `db:"fly_id"`      // 巡检路线id
		RoadName   string    `db:"road_name"`   // 无人机名称
		Operator   string    `db:"operator"`    // 操作者
		Status     int64     `db:"status"`      // -1,异常结束，0->起飞；1->正常完成
		Remark     string    `db:"remark"`      // 异常结束原因
		Lat        float64   `db:"lat"`         // 纬度
		Lon        float64   `db:"lon"`         // 经度
		Alt        float64   `db:"alt"`         // 高度
		CreateTime time.Time `db:"create_time"` // 飞行开始时间
		EndTime    time.Time `db:"end_time"`    // 飞行结束时间
	}
)

func newUavFlyHistoryModel(conn sqlx.SqlConn) *defaultUavFlyHistoryModel {
	return &defaultUavFlyHistoryModel{
		conn:  conn,
		table: "`uav_fly_history`",
	}
}

func (m *defaultUavFlyHistoryModel) withSession(session sqlx.Session) *defaultUavFlyHistoryModel {
	return &defaultUavFlyHistoryModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`uav_fly_history`",
	}
}

func (m *defaultUavFlyHistoryModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUavFlyHistoryModel) FindOne(ctx context.Context, id int64) (*UavFlyHistory, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", uavFlyHistoryRows, m.table)
	var resp UavFlyHistory
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUavFlyHistoryModel) Insert(ctx context.Context, data *UavFlyHistory) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, uavFlyHistoryRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UavId, data.UavName, data.FlyId, data.RoadName, data.Operator, data.Status, data.Remark, data.Lat, data.Lon, data.Alt, data.EndTime)
	return ret, err
}

func (m *defaultUavFlyHistoryModel) Update(ctx context.Context, data *UavFlyHistory) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, uavFlyHistoryRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UavId, data.UavName, data.FlyId, data.RoadName, data.Operator, data.Status, data.Remark, data.Lat, data.Lon, data.Alt, data.EndTime, data.Id)
	return err
}

func (m *defaultUavFlyHistoryModel) tableName() string {
	return m.table
}
