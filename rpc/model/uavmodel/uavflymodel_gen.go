// Code generated by goctl. DO NOT EDIT.

package uavmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	uavFlyFieldNames          = builder.RawFieldNames(&UavFly{})
	uavFlyRows                = strings.Join(uavFlyFieldNames, ",")
	uavFlyRowsExpectAutoSet   = strings.Join(stringx.Remove(uavFlyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	uavFlyRowsWithPlaceHolder = strings.Join(stringx.Remove(uavFlyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	uavFlyModel interface {
		Insert(ctx context.Context, data *UavFly) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UavFly, error)
		Update(ctx context.Context, data *UavFly) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUavFlyModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UavFly struct {
		Id         int64     `db:"id"`          // 路线编号
		Name       string    `db:"name"`        // 路线昵称
		Data       string    `db:"data"`        // 路线数据
		CreateTime time.Time `db:"create_time"` // 创建时间
		Creator    string    `db:"creator"`     // 创建者
	}
)

func newUavFlyModel(conn sqlx.SqlConn) *defaultUavFlyModel {
	return &defaultUavFlyModel{
		conn:  conn,
		table: "`uav_fly`",
	}
}

func (m *defaultUavFlyModel) withSession(session sqlx.Session) *defaultUavFlyModel {
	return &defaultUavFlyModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`uav_fly`",
	}
}

func (m *defaultUavFlyModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUavFlyModel) FindOne(ctx context.Context, id int64) (*UavFly, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", uavFlyRows, m.table)
	var resp UavFly
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUavFlyModel) Insert(ctx context.Context, data *UavFly) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, uavFlyRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Data, data.Creator)
	return ret, err
}

func (m *defaultUavFlyModel) Update(ctx context.Context, data *UavFly) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, uavFlyRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Data, data.Creator, data.Id)
	return err
}

func (m *defaultUavFlyModel) tableName() string {
	return m.table
}
