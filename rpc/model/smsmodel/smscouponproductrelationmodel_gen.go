// Code generated by goctl. DO NOT EDIT.

package smsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	smsCouponProductRelationFieldNames          = builder.RawFieldNames(&SmsCouponProductRelation{})
	smsCouponProductRelationRows                = strings.Join(smsCouponProductRelationFieldNames, ",")
	smsCouponProductRelationRowsExpectAutoSet   = strings.Join(stringx.Remove(smsCouponProductRelationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	smsCouponProductRelationRowsWithPlaceHolder = strings.Join(stringx.Remove(smsCouponProductRelationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	smsCouponProductRelationModel interface {
		Insert(ctx context.Context, data *SmsCouponProductRelation) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SmsCouponProductRelation, error)
		Update(ctx context.Context, data *SmsCouponProductRelation) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSmsCouponProductRelationModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SmsCouponProductRelation struct {
		Id          int64  `db:"id"`
		CouponId    int64  `db:"coupon_id"`
		ProductId   int64  `db:"product_id"`
		ProductName string `db:"product_name"` // 商品名称
		ProductSn   string `db:"product_sn"`   // 商品编码
	}
)

func newSmsCouponProductRelationModel(conn sqlx.SqlConn) *defaultSmsCouponProductRelationModel {
	return &defaultSmsCouponProductRelationModel{
		conn:  conn,
		table: "`sms_coupon_product_relation`",
	}
}

func (m *defaultSmsCouponProductRelationModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSmsCouponProductRelationModel) FindOne(ctx context.Context, id int64) (*SmsCouponProductRelation, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", smsCouponProductRelationRows, m.table)
	var resp SmsCouponProductRelation
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSmsCouponProductRelationModel) Insert(ctx context.Context, data *SmsCouponProductRelation) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, smsCouponProductRelationRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CouponId, data.ProductId, data.ProductName, data.ProductSn)
	return ret, err
}

func (m *defaultSmsCouponProductRelationModel) Update(ctx context.Context, data *SmsCouponProductRelation) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, smsCouponProductRelationRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CouponId, data.ProductId, data.ProductName, data.ProductSn, data.Id)
	return err
}

func (m *defaultSmsCouponProductRelationModel) tableName() string {
	return m.table
}
