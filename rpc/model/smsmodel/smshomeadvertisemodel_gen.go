// Code generated by goctl. DO NOT EDIT.

package smsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	smsHomeAdvertiseFieldNames          = builder.RawFieldNames(&SmsHomeAdvertise{})
	smsHomeAdvertiseRows                = strings.Join(smsHomeAdvertiseFieldNames, ",")
	smsHomeAdvertiseRowsExpectAutoSet   = strings.Join(stringx.Remove(smsHomeAdvertiseFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	smsHomeAdvertiseRowsWithPlaceHolder = strings.Join(stringx.Remove(smsHomeAdvertiseFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	smsHomeAdvertiseModel interface {
		Insert(ctx context.Context, data *SmsHomeAdvertise) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SmsHomeAdvertise, error)
		Update(ctx context.Context, data *SmsHomeAdvertise) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSmsHomeAdvertiseModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SmsHomeAdvertise struct {
		Id         int64          `db:"id"`
		Name       string         `db:"name"`        // 名称
		Type       int64          `db:"type"`        // 轮播位置：0->PC首页轮播；1->app首页轮播
		Pic        string         `db:"pic"`         // 图片地址
		StartTime  time.Time      `db:"start_time"`  // 开始时间
		EndTime    time.Time      `db:"end_time"`    // 结束时间
		Status     int64          `db:"status"`      // 上下线状态：0->下线；1->上线
		ClickCount int64          `db:"click_count"` // 点击数
		OrderCount int64          `db:"order_count"` // 下单数
		Url        string         `db:"url"`         // 链接地址
		Note       sql.NullString `db:"note"`        // 备注
		Sort       int64          `db:"sort"`        // 排序
	}
)

func newSmsHomeAdvertiseModel(conn sqlx.SqlConn) *defaultSmsHomeAdvertiseModel {
	return &defaultSmsHomeAdvertiseModel{
		conn:  conn,
		table: "`sms_home_advertise`",
	}
}

func (m *defaultSmsHomeAdvertiseModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSmsHomeAdvertiseModel) FindOne(ctx context.Context, id int64) (*SmsHomeAdvertise, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", smsHomeAdvertiseRows, m.table)
	var resp SmsHomeAdvertise
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSmsHomeAdvertiseModel) Insert(ctx context.Context, data *SmsHomeAdvertise) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, smsHomeAdvertiseRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Type, data.Pic, data.StartTime, data.EndTime, data.Status, data.ClickCount, data.OrderCount, data.Url, data.Note, data.Sort)
	return ret, err
}

func (m *defaultSmsHomeAdvertiseModel) Update(ctx context.Context, data *SmsHomeAdvertise) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, smsHomeAdvertiseRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Type, data.Pic, data.StartTime, data.EndTime, data.Status, data.ClickCount, data.OrderCount, data.Url, data.Note, data.Sort, data.Id)
	return err
}

func (m *defaultSmsHomeAdvertiseModel) tableName() string {
	return m.table
}
