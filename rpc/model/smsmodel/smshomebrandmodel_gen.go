// Code generated by goctl. DO NOT EDIT.

package smsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	smsHomeBrandFieldNames          = builder.RawFieldNames(&SmsHomeBrand{})
	smsHomeBrandRows                = strings.Join(smsHomeBrandFieldNames, ",")
	smsHomeBrandRowsExpectAutoSet   = strings.Join(stringx.Remove(smsHomeBrandFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	smsHomeBrandRowsWithPlaceHolder = strings.Join(stringx.Remove(smsHomeBrandFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	smsHomeBrandModel interface {
		Insert(ctx context.Context, data *SmsHomeBrand) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SmsHomeBrand, error)
		Update(ctx context.Context, data *SmsHomeBrand) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSmsHomeBrandModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SmsHomeBrand struct {
		Id              int64  `db:"id"`
		BrandId         int64  `db:"brand_id"`         // 商品品牌id
		BrandName       string `db:"brand_name"`       // 商品品牌名称
		RecommendStatus int64  `db:"recommend_status"` // 推荐状态：0->不推荐;1->推荐
		Sort            int64  `db:"sort"`             // 排序
	}
)

func newSmsHomeBrandModel(conn sqlx.SqlConn) *defaultSmsHomeBrandModel {
	return &defaultSmsHomeBrandModel{
		conn:  conn,
		table: "`sms_home_brand`",
	}
}

func (m *defaultSmsHomeBrandModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSmsHomeBrandModel) FindOne(ctx context.Context, id int64) (*SmsHomeBrand, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", smsHomeBrandRows, m.table)
	var resp SmsHomeBrand
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSmsHomeBrandModel) Insert(ctx context.Context, data *SmsHomeBrand) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, smsHomeBrandRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.BrandId, data.BrandName, data.RecommendStatus, data.Sort)
	return ret, err
}

func (m *defaultSmsHomeBrandModel) Update(ctx context.Context, data *SmsHomeBrand) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, smsHomeBrandRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.BrandId, data.BrandName, data.RecommendStatus, data.Sort, data.Id)
	return err
}

func (m *defaultSmsHomeBrandModel) tableName() string {
	return m.table
}
