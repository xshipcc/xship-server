// Code generated by goctl. DO NOT EDIT.

package smsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	smsFlashPromotionSessionFieldNames          = builder.RawFieldNames(&SmsFlashPromotionSession{})
	smsFlashPromotionSessionRows                = strings.Join(smsFlashPromotionSessionFieldNames, ",")
	smsFlashPromotionSessionRowsExpectAutoSet   = strings.Join(stringx.Remove(smsFlashPromotionSessionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	smsFlashPromotionSessionRowsWithPlaceHolder = strings.Join(stringx.Remove(smsFlashPromotionSessionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	smsFlashPromotionSessionModel interface {
		Insert(ctx context.Context, data *SmsFlashPromotionSession) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SmsFlashPromotionSession, error)
		Update(ctx context.Context, data *SmsFlashPromotionSession) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSmsFlashPromotionSessionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SmsFlashPromotionSession struct {
		Id         int64     `db:"id"`          // 编号
		Name       string    `db:"name"`        // 场次名称
		StartTime  string    `db:"start_time"`  // 每日开始时间
		EndTime    string    `db:"end_time"`    // 每日结束时间
		Status     int64     `db:"status"`      // 启用状态：0->不启用；1->启用
		CreateTime time.Time `db:"create_time"` // 创建时间
	}
)

func newSmsFlashPromotionSessionModel(conn sqlx.SqlConn) *defaultSmsFlashPromotionSessionModel {
	return &defaultSmsFlashPromotionSessionModel{
		conn:  conn,
		table: "`sms_flash_promotion_session`",
	}
}

func (m *defaultSmsFlashPromotionSessionModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSmsFlashPromotionSessionModel) FindOne(ctx context.Context, id int64) (*SmsFlashPromotionSession, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", smsFlashPromotionSessionRows, m.table)
	var resp SmsFlashPromotionSession
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSmsFlashPromotionSessionModel) Insert(ctx context.Context, data *SmsFlashPromotionSession) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, smsFlashPromotionSessionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.StartTime, data.EndTime, data.Status)
	return ret, err
}

func (m *defaultSmsFlashPromotionSessionModel) Update(ctx context.Context, data *SmsFlashPromotionSession) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, smsFlashPromotionSessionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.StartTime, data.EndTime, data.Status, data.Id)
	return err
}

func (m *defaultSmsFlashPromotionSessionModel) tableName() string {
	return m.table
}
