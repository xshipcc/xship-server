// Code generated by goctl. DO NOT EDIT.

package smsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	smsHomeRecommendProductFieldNames          = builder.RawFieldNames(&SmsHomeRecommendProduct{})
	smsHomeRecommendProductRows                = strings.Join(smsHomeRecommendProductFieldNames, ",")
	smsHomeRecommendProductRowsExpectAutoSet   = strings.Join(stringx.Remove(smsHomeRecommendProductFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	smsHomeRecommendProductRowsWithPlaceHolder = strings.Join(stringx.Remove(smsHomeRecommendProductFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	smsHomeRecommendProductModel interface {
		Insert(ctx context.Context, data *SmsHomeRecommendProduct) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SmsHomeRecommendProduct, error)
		Update(ctx context.Context, data *SmsHomeRecommendProduct) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSmsHomeRecommendProductModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SmsHomeRecommendProduct struct {
		Id              int64  `db:"id"`
		ProductId       int64  `db:"product_id"`       // 商品id
		ProductName     string `db:"product_name"`     // 商品名称
		RecommendStatus int64  `db:"recommend_status"` // 推荐状态：0->不推荐;1->推荐
		Sort            int64  `db:"sort"`             // 排序
	}
)

func newSmsHomeRecommendProductModel(conn sqlx.SqlConn) *defaultSmsHomeRecommendProductModel {
	return &defaultSmsHomeRecommendProductModel{
		conn:  conn,
		table: "`sms_home_recommend_product`",
	}
}

func (m *defaultSmsHomeRecommendProductModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSmsHomeRecommendProductModel) FindOne(ctx context.Context, id int64) (*SmsHomeRecommendProduct, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", smsHomeRecommendProductRows, m.table)
	var resp SmsHomeRecommendProduct
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSmsHomeRecommendProductModel) Insert(ctx context.Context, data *SmsHomeRecommendProduct) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, smsHomeRecommendProductRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ProductId, data.ProductName, data.RecommendStatus, data.Sort)
	return ret, err
}

func (m *defaultSmsHomeRecommendProductModel) Update(ctx context.Context, data *SmsHomeRecommendProduct) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, smsHomeRecommendProductRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ProductId, data.ProductName, data.RecommendStatus, data.Sort, data.Id)
	return err
}

func (m *defaultSmsHomeRecommendProductModel) tableName() string {
	return m.table
}
