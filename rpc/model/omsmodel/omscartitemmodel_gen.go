// Code generated by goctl. DO NOT EDIT.

package omsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	omsCartItemFieldNames          = builder.RawFieldNames(&OmsCartItem{})
	omsCartItemRows                = strings.Join(omsCartItemFieldNames, ",")
	omsCartItemRowsExpectAutoSet   = strings.Join(stringx.Remove(omsCartItemFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	omsCartItemRowsWithPlaceHolder = strings.Join(stringx.Remove(omsCartItemFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	omsCartItemModel interface {
		Insert(ctx context.Context, data *OmsCartItem) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OmsCartItem, error)
		Update(ctx context.Context, data *OmsCartItem) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOmsCartItemModel struct {
		conn  sqlx.SqlConn
		table string
	}

	OmsCartItem struct {
		Id                int64     `db:"id"`
		ProductId         int64     `db:"product_id"`
		ProductSkuId      int64     `db:"product_sku_id"`
		MemberId          int64     `db:"member_id"`
		Quantity          int64     `db:"quantity"`            // 购买数量
		Price             float64   `db:"price"`               // 添加到购物车的价格
		ProductPic        string    `db:"product_pic"`         // 商品主图
		ProductName       string    `db:"product_name"`        // 商品名称
		ProductSubTitle   string    `db:"product_sub_title"`   // 商品副标题（卖点）
		ProductSkuCode    string    `db:"product_sku_code"`    // 商品sku条码
		MemberNickname    string    `db:"member_nickname"`     // 会员昵称
		CreateDate        time.Time `db:"create_date"`         // 创建时间
		ModifyDate        time.Time `db:"modify_date"`         // 修改时间
		DeleteStatus      int64     `db:"delete_status"`       // 是否删除
		ProductCategoryId int64     `db:"product_category_id"` // 商品分类
		ProductBrand      string    `db:"product_brand"`
		ProductSn         string    `db:"product_sn"`
		ProductAttr       string    `db:"product_attr"` // 商品销售属性:[{"key":"颜色","value":"颜色"},{"key":"容量","value":"4G"}]
	}
)

func newOmsCartItemModel(conn sqlx.SqlConn) *defaultOmsCartItemModel {
	return &defaultOmsCartItemModel{
		conn:  conn,
		table: "`oms_cart_item`",
	}
}

func (m *defaultOmsCartItemModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOmsCartItemModel) FindOne(ctx context.Context, id int64) (*OmsCartItem, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", omsCartItemRows, m.table)
	var resp OmsCartItem
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOmsCartItemModel) Insert(ctx context.Context, data *OmsCartItem) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, omsCartItemRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ProductId, data.ProductSkuId, data.MemberId, data.Quantity, data.Price, data.ProductPic, data.ProductName, data.ProductSubTitle, data.ProductSkuCode, data.MemberNickname, data.CreateDate, data.ModifyDate, data.DeleteStatus, data.ProductCategoryId, data.ProductBrand, data.ProductSn, data.ProductAttr)
	return ret, err
}

func (m *defaultOmsCartItemModel) Update(ctx context.Context, data *OmsCartItem) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, omsCartItemRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ProductId, data.ProductSkuId, data.MemberId, data.Quantity, data.Price, data.ProductPic, data.ProductName, data.ProductSubTitle, data.ProductSkuCode, data.MemberNickname, data.CreateDate, data.ModifyDate, data.DeleteStatus, data.ProductCategoryId, data.ProductBrand, data.ProductSn, data.ProductAttr, data.Id)
	return err
}

func (m *defaultOmsCartItemModel) tableName() string {
	return m.table
}
