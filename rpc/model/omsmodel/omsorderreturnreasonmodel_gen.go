// Code generated by goctl. DO NOT EDIT.

package omsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	omsOrderReturnReasonFieldNames          = builder.RawFieldNames(&OmsOrderReturnReason{})
	omsOrderReturnReasonRows                = strings.Join(omsOrderReturnReasonFieldNames, ",")
	omsOrderReturnReasonRowsExpectAutoSet   = strings.Join(stringx.Remove(omsOrderReturnReasonFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	omsOrderReturnReasonRowsWithPlaceHolder = strings.Join(stringx.Remove(omsOrderReturnReasonFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	omsOrderReturnReasonModel interface {
		Insert(ctx context.Context, data *OmsOrderReturnReason) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OmsOrderReturnReason, error)
		Update(ctx context.Context, data *OmsOrderReturnReason) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOmsOrderReturnReasonModel struct {
		conn  sqlx.SqlConn
		table string
	}

	OmsOrderReturnReason struct {
		Id         int64     `db:"id"`
		Name       string    `db:"name"` // 退货类型
		Sort       int64     `db:"sort"`
		Status     int64     `db:"status"`      // 状态：0->不启用；1->启用
		CreateTime time.Time `db:"create_time"` // 添加时间
	}
)

func newOmsOrderReturnReasonModel(conn sqlx.SqlConn) *defaultOmsOrderReturnReasonModel {
	return &defaultOmsOrderReturnReasonModel{
		conn:  conn,
		table: "`oms_order_return_reason`",
	}
}

func (m *defaultOmsOrderReturnReasonModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOmsOrderReturnReasonModel) FindOne(ctx context.Context, id int64) (*OmsOrderReturnReason, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", omsOrderReturnReasonRows, m.table)
	var resp OmsOrderReturnReason
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOmsOrderReturnReasonModel) Insert(ctx context.Context, data *OmsOrderReturnReason) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, omsOrderReturnReasonRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Sort, data.Status)
	return ret, err
}

func (m *defaultOmsOrderReturnReasonModel) Update(ctx context.Context, data *OmsOrderReturnReason) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, omsOrderReturnReasonRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Sort, data.Status, data.Id)
	return err
}

func (m *defaultOmsOrderReturnReasonModel) tableName() string {
	return m.table
}
