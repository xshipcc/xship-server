// Code generated by goctl. DO NOT EDIT.

package omsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	omsOrderOperateHistoryFieldNames          = builder.RawFieldNames(&OmsOrderOperateHistory{})
	omsOrderOperateHistoryRows                = strings.Join(omsOrderOperateHistoryFieldNames, ",")
	omsOrderOperateHistoryRowsExpectAutoSet   = strings.Join(stringx.Remove(omsOrderOperateHistoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	omsOrderOperateHistoryRowsWithPlaceHolder = strings.Join(stringx.Remove(omsOrderOperateHistoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	omsOrderOperateHistoryModel interface {
		Insert(ctx context.Context, data *OmsOrderOperateHistory) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OmsOrderOperateHistory, error)
		Update(ctx context.Context, data *OmsOrderOperateHistory) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOmsOrderOperateHistoryModel struct {
		conn  sqlx.SqlConn
		table string
	}

	OmsOrderOperateHistory struct {
		Id          int64          `db:"id"`
		OrderId     int64          `db:"order_id"`     // 订单id
		OperateMan  string         `db:"operate_man"`  // 操作人：用户；系统；后台管理员
		CreateTime  time.Time      `db:"create_time"`  // 操作时间
		OrderStatus int64          `db:"order_status"` // 订单状态：0->待付款；1->待发货；2->已发货；3->已完成；4->已关闭；5->无效订单
		Note        sql.NullString `db:"note"`         // 备注
	}
)

func newOmsOrderOperateHistoryModel(conn sqlx.SqlConn) *defaultOmsOrderOperateHistoryModel {
	return &defaultOmsOrderOperateHistoryModel{
		conn:  conn,
		table: "`oms_order_operate_history`",
	}
}

func (m *defaultOmsOrderOperateHistoryModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOmsOrderOperateHistoryModel) FindOne(ctx context.Context, id int64) (*OmsOrderOperateHistory, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", omsOrderOperateHistoryRows, m.table)
	var resp OmsOrderOperateHistory
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOmsOrderOperateHistoryModel) Insert(ctx context.Context, data *OmsOrderOperateHistory) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, omsOrderOperateHistoryRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OrderId, data.OperateMan, data.OrderStatus, data.Note)
	return ret, err
}

func (m *defaultOmsOrderOperateHistoryModel) Update(ctx context.Context, data *OmsOrderOperateHistory) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, omsOrderOperateHistoryRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.OrderId, data.OperateMan, data.OrderStatus, data.Note, data.Id)
	return err
}

func (m *defaultOmsOrderOperateHistoryModel) tableName() string {
	return m.table
}
