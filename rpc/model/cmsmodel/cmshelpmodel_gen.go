// Code generated by goctl. DO NOT EDIT.

package cmsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	cmsHelpFieldNames          = builder.RawFieldNames(&CmsHelp{})
	cmsHelpRows                = strings.Join(cmsHelpFieldNames, ",")
	cmsHelpRowsExpectAutoSet   = strings.Join(stringx.Remove(cmsHelpFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	cmsHelpRowsWithPlaceHolder = strings.Join(stringx.Remove(cmsHelpFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	cmsHelpModel interface {
		Insert(ctx context.Context, data *CmsHelp) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CmsHelp, error)
		Update(ctx context.Context, data *CmsHelp) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCmsHelpModel struct {
		conn  sqlx.SqlConn
		table string
	}

	CmsHelp struct {
		Id         int64     `db:"id"`
		CategoryId int64     `db:"category_id"`
		Icon       string    `db:"icon"`
		Title      string    `db:"title"`
		ShowStatus int64     `db:"show_status"`
		CreateTime time.Time `db:"create_time"`
		ReadCount  int64     `db:"read_count"`
		Content    string    `db:"content"`
	}
)

func newCmsHelpModel(conn sqlx.SqlConn) *defaultCmsHelpModel {
	return &defaultCmsHelpModel{
		conn:  conn,
		table: "`cms_help`",
	}
}

func (m *defaultCmsHelpModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCmsHelpModel) FindOne(ctx context.Context, id int64) (*CmsHelp, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", cmsHelpRows, m.table)
	var resp CmsHelp
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCmsHelpModel) Insert(ctx context.Context, data *CmsHelp) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, cmsHelpRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CategoryId, data.Icon, data.Title, data.ShowStatus, data.ReadCount, data.Content)
	return ret, err
}

func (m *defaultCmsHelpModel) Update(ctx context.Context, data *CmsHelp) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, cmsHelpRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CategoryId, data.Icon, data.Title, data.ShowStatus, data.ReadCount, data.Content, data.Id)
	return err
}

func (m *defaultCmsHelpModel) tableName() string {
	return m.table
}
