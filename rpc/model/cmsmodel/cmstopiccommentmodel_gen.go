// Code generated by goctl. DO NOT EDIT.

package cmsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	cmsTopicCommentFieldNames          = builder.RawFieldNames(&CmsTopicComment{})
	cmsTopicCommentRows                = strings.Join(cmsTopicCommentFieldNames, ",")
	cmsTopicCommentRowsExpectAutoSet   = strings.Join(stringx.Remove(cmsTopicCommentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	cmsTopicCommentRowsWithPlaceHolder = strings.Join(stringx.Remove(cmsTopicCommentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	cmsTopicCommentModel interface {
		Insert(ctx context.Context, data *CmsTopicComment) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CmsTopicComment, error)
		Update(ctx context.Context, data *CmsTopicComment) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCmsTopicCommentModel struct {
		conn  sqlx.SqlConn
		table string
	}

	CmsTopicComment struct {
		Id             int64     `db:"id"`
		MemberNickName string    `db:"member_nick_name"`
		TopicId        int64     `db:"topic_id"`
		MemberIcon     string    `db:"member_icon"`
		Content        string    `db:"content"`
		CreateTime     time.Time `db:"create_time"`
		ShowStatus     int64     `db:"show_status"`
	}
)

func newCmsTopicCommentModel(conn sqlx.SqlConn) *defaultCmsTopicCommentModel {
	return &defaultCmsTopicCommentModel{
		conn:  conn,
		table: "`cms_topic_comment`",
	}
}

func (m *defaultCmsTopicCommentModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCmsTopicCommentModel) FindOne(ctx context.Context, id int64) (*CmsTopicComment, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", cmsTopicCommentRows, m.table)
	var resp CmsTopicComment
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCmsTopicCommentModel) Insert(ctx context.Context, data *CmsTopicComment) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, cmsTopicCommentRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.MemberNickName, data.TopicId, data.MemberIcon, data.Content, data.ShowStatus)
	return ret, err
}

func (m *defaultCmsTopicCommentModel) Update(ctx context.Context, data *CmsTopicComment) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, cmsTopicCommentRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.MemberNickName, data.TopicId, data.MemberIcon, data.Content, data.ShowStatus, data.Id)
	return err
}

func (m *defaultCmsTopicCommentModel) tableName() string {
	return m.table
}
