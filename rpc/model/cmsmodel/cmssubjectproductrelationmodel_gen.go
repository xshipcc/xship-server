// Code generated by goctl. DO NOT EDIT.

package cmsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	cmsSubjectProductRelationFieldNames          = builder.RawFieldNames(&CmsSubjectProductRelation{})
	cmsSubjectProductRelationRows                = strings.Join(cmsSubjectProductRelationFieldNames, ",")
	cmsSubjectProductRelationRowsExpectAutoSet   = strings.Join(stringx.Remove(cmsSubjectProductRelationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	cmsSubjectProductRelationRowsWithPlaceHolder = strings.Join(stringx.Remove(cmsSubjectProductRelationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	cmsSubjectProductRelationModel interface {
		Insert(ctx context.Context, data *CmsSubjectProductRelation) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CmsSubjectProductRelation, error)
		Update(ctx context.Context, data *CmsSubjectProductRelation) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCmsSubjectProductRelationModel struct {
		conn  sqlx.SqlConn
		table string
	}

	CmsSubjectProductRelation struct {
		Id        int64 `db:"id"`
		SubjectId int64 `db:"subject_id"`
		ProductId int64 `db:"product_id"`
	}
)

func newCmsSubjectProductRelationModel(conn sqlx.SqlConn) *defaultCmsSubjectProductRelationModel {
	return &defaultCmsSubjectProductRelationModel{
		conn:  conn,
		table: "`cms_subject_product_relation`",
	}
}

func (m *defaultCmsSubjectProductRelationModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCmsSubjectProductRelationModel) FindOne(ctx context.Context, id int64) (*CmsSubjectProductRelation, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", cmsSubjectProductRelationRows, m.table)
	var resp CmsSubjectProductRelation
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCmsSubjectProductRelationModel) Insert(ctx context.Context, data *CmsSubjectProductRelation) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, cmsSubjectProductRelationRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.SubjectId, data.ProductId)
	return ret, err
}

func (m *defaultCmsSubjectProductRelationModel) Update(ctx context.Context, data *CmsSubjectProductRelation) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, cmsSubjectProductRelationRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.SubjectId, data.ProductId, data.Id)
	return err
}

func (m *defaultCmsSubjectProductRelationModel) tableName() string {
	return m.table
}
