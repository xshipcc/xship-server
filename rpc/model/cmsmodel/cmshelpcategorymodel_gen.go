// Code generated by goctl. DO NOT EDIT.

package cmsmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	cmsHelpCategoryFieldNames          = builder.RawFieldNames(&CmsHelpCategory{})
	cmsHelpCategoryRows                = strings.Join(cmsHelpCategoryFieldNames, ",")
	cmsHelpCategoryRowsExpectAutoSet   = strings.Join(stringx.Remove(cmsHelpCategoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	cmsHelpCategoryRowsWithPlaceHolder = strings.Join(stringx.Remove(cmsHelpCategoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	cmsHelpCategoryModel interface {
		Insert(ctx context.Context, data *CmsHelpCategory) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CmsHelpCategory, error)
		Update(ctx context.Context, data *CmsHelpCategory) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCmsHelpCategoryModel struct {
		conn  sqlx.SqlConn
		table string
	}

	CmsHelpCategory struct {
		Id         int64  `db:"id"`
		Name       string `db:"name"`
		Icon       string `db:"icon"`       // 分类图标
		HelpCount  int64  `db:"help_count"` // 专题数量
		ShowStatus int64  `db:"show_status"`
		Sort       int64  `db:"sort"`
	}
)

func newCmsHelpCategoryModel(conn sqlx.SqlConn) *defaultCmsHelpCategoryModel {
	return &defaultCmsHelpCategoryModel{
		conn:  conn,
		table: "`cms_help_category`",
	}
}

func (m *defaultCmsHelpCategoryModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCmsHelpCategoryModel) FindOne(ctx context.Context, id int64) (*CmsHelpCategory, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", cmsHelpCategoryRows, m.table)
	var resp CmsHelpCategory
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCmsHelpCategoryModel) Insert(ctx context.Context, data *CmsHelpCategory) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, cmsHelpCategoryRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Icon, data.HelpCount, data.ShowStatus, data.Sort)
	return ret, err
}

func (m *defaultCmsHelpCategoryModel) Update(ctx context.Context, data *CmsHelpCategory) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, cmsHelpCategoryRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Icon, data.HelpCount, data.ShowStatus, data.Sort, data.Id)
	return err
}

func (m *defaultCmsHelpCategoryModel) tableName() string {
	return m.table
}
