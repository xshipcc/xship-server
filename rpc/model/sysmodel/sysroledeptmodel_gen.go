// Code generated by goctl. DO NOT EDIT.

package sysmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysRoleDeptFieldNames          = builder.RawFieldNames(&SysRoleDept{})
	sysRoleDeptRows                = strings.Join(sysRoleDeptFieldNames, ",")
	sysRoleDeptRowsExpectAutoSet   = strings.Join(stringx.Remove(sysRoleDeptFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysRoleDeptRowsWithPlaceHolder = strings.Join(stringx.Remove(sysRoleDeptFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	sysRoleDeptModel interface {
		Insert(ctx context.Context, data *SysRoleDept) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysRoleDept, error)
		Update(ctx context.Context, data *SysRoleDept) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysRoleDeptModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysRoleDept struct {
		Id         int64     `db:"id"`          // 编号
		RoleId     int64     `db:"role_id"`     // 角色ID
		DeptId     int64     `db:"dept_id"`     // 机构ID
		CreateBy   string    `db:"create_by"`   // 创建人
		CreateTime time.Time `db:"create_time"` // 创建时间
	}
)

func newSysRoleDeptModel(conn sqlx.SqlConn) *defaultSysRoleDeptModel {
	return &defaultSysRoleDeptModel{
		conn:  conn,
		table: "`sys_role_dept`",
	}
}

func (m *defaultSysRoleDeptModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSysRoleDeptModel) FindOne(ctx context.Context, id int64) (*SysRoleDept, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysRoleDeptRows, m.table)
	var resp SysRoleDept
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysRoleDeptModel) Insert(ctx context.Context, data *SysRoleDept) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, sysRoleDeptRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.RoleId, data.DeptId, data.CreateBy)
	return ret, err
}

func (m *defaultSysRoleDeptModel) Update(ctx context.Context, data *SysRoleDept) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysRoleDeptRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.RoleId, data.DeptId, data.CreateBy, data.Id)
	return err
}

func (m *defaultSysRoleDeptModel) tableName() string {
	return m.table
}
