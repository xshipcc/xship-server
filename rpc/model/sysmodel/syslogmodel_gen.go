// Code generated by goctl. DO NOT EDIT.

package sysmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysLogFieldNames          = builder.RawFieldNames(&SysLog{})
	sysLogRows                = strings.Join(sysLogFieldNames, ",")
	sysLogRowsExpectAutoSet   = strings.Join(stringx.Remove(sysLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysLogRowsWithPlaceHolder = strings.Join(stringx.Remove(sysLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	sysLogModel interface {
		Insert(ctx context.Context, data *SysLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysLog, error)
		Update(ctx context.Context, data *SysLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysLog struct {
		Id             int64          `db:"id"`              // 编号
		UserName       string         `db:"user_name"`       // 用户名
		Operation      string         `db:"operation"`       // 用户操作
		Method         string         `db:"method"`          // 请求方法
		RequestParams  string         `db:"request_params"`  // 请求参数
		ResponseParams sql.NullString `db:"response_params"` // 响应参数
		Time           int64          `db:"time"`            // 执行时长(毫秒)
		Ip             sql.NullString `db:"ip"`              // IP地址
		OperationTime  time.Time      `db:"operation_time"`  // 操作时间
	}
)

func newSysLogModel(conn sqlx.SqlConn) *defaultSysLogModel {
	return &defaultSysLogModel{
		conn:  conn,
		table: "`sys_log`",
	}
}

func (m *defaultSysLogModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSysLogModel) FindOne(ctx context.Context, id int64) (*SysLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysLogRows, m.table)
	var resp SysLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysLogModel) Insert(ctx context.Context, data *SysLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserName, data.Operation, data.Method, data.RequestParams, data.ResponseParams, data.Time, data.Ip, data.OperationTime)
	return ret, err
}

func (m *defaultSysLogModel) Update(ctx context.Context, data *SysLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserName, data.Operation, data.Method, data.RequestParams, data.ResponseParams, data.Time, data.Ip, data.OperationTime, data.Id)
	return err
}

func (m *defaultSysLogModel) tableName() string {
	return m.table
}
