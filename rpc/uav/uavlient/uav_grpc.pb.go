// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: uav.proto

package uavlient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UavDeviceService_UavDeviceAdd_FullMethodName       = "/uavclient.UavDeviceService/UavDeviceAdd"
	UavDeviceService_UavDeviceList_FullMethodName      = "/uavclient.UavDeviceService/UavDeviceList"
	UavDeviceService_UavDeviceUpdate_FullMethodName    = "/uavclient.UavDeviceService/UavDeviceUpdate"
	UavDeviceService_UavDeviceFindById_FullMethodName  = "/uavclient.UavDeviceService/UavDeviceFindById"
	UavDeviceService_UavDeviceFindByIds_FullMethodName = "/uavclient.UavDeviceService/UavDeviceFindByIds"
)

// UavDeviceServiceClient is the client API for UavDeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UavDeviceServiceClient interface {
	// 添加设备
	UavDeviceAdd(ctx context.Context, in *UavDeviceAddReq, opts ...grpc.CallOption) (*UavDeviceAddResp, error)
	// 获取设备列表
	UavDeviceList(ctx context.Context, in *UavDeviceListReq, opts ...grpc.CallOption) (*UavDeviceListResp, error)
	// 修改设备表
	UavDeviceUpdate(ctx context.Context, in *UavDeviceAddReq, opts ...grpc.CallOption) (*UavDeviceAddResp, error)
	// 根据设备d查询报警
	UavDeviceFindById(ctx context.Context, in *UavDeviceFindByIdReq, opts ...grpc.CallOption) (*UavDeviceFindByIdResp, error)
	// 根据设备ids查询报警
	UavDeviceFindByIds(ctx context.Context, in *UavDeviceFindByIdsReq, opts ...grpc.CallOption) (*UavDeviceFindByIdsResp, error)
}

type uavDeviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUavDeviceServiceClient(cc grpc.ClientConnInterface) UavDeviceServiceClient {
	return &uavDeviceServiceClient{cc}
}

func (c *uavDeviceServiceClient) UavDeviceAdd(ctx context.Context, in *UavDeviceAddReq, opts ...grpc.CallOption) (*UavDeviceAddResp, error) {
	out := new(UavDeviceAddResp)
	err := c.cc.Invoke(ctx, UavDeviceService_UavDeviceAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uavDeviceServiceClient) UavDeviceList(ctx context.Context, in *UavDeviceListReq, opts ...grpc.CallOption) (*UavDeviceListResp, error) {
	out := new(UavDeviceListResp)
	err := c.cc.Invoke(ctx, UavDeviceService_UavDeviceList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uavDeviceServiceClient) UavDeviceUpdate(ctx context.Context, in *UavDeviceAddReq, opts ...grpc.CallOption) (*UavDeviceAddResp, error) {
	out := new(UavDeviceAddResp)
	err := c.cc.Invoke(ctx, UavDeviceService_UavDeviceUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uavDeviceServiceClient) UavDeviceFindById(ctx context.Context, in *UavDeviceFindByIdReq, opts ...grpc.CallOption) (*UavDeviceFindByIdResp, error) {
	out := new(UavDeviceFindByIdResp)
	err := c.cc.Invoke(ctx, UavDeviceService_UavDeviceFindById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uavDeviceServiceClient) UavDeviceFindByIds(ctx context.Context, in *UavDeviceFindByIdsReq, opts ...grpc.CallOption) (*UavDeviceFindByIdsResp, error) {
	out := new(UavDeviceFindByIdsResp)
	err := c.cc.Invoke(ctx, UavDeviceService_UavDeviceFindByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UavDeviceServiceServer is the server API for UavDeviceService service.
// All implementations must embed UnimplementedUavDeviceServiceServer
// for forward compatibility
type UavDeviceServiceServer interface {
	// 添加设备
	UavDeviceAdd(context.Context, *UavDeviceAddReq) (*UavDeviceAddResp, error)
	// 获取设备列表
	UavDeviceList(context.Context, *UavDeviceListReq) (*UavDeviceListResp, error)
	// 修改设备表
	UavDeviceUpdate(context.Context, *UavDeviceAddReq) (*UavDeviceAddResp, error)
	// 根据设备d查询报警
	UavDeviceFindById(context.Context, *UavDeviceFindByIdReq) (*UavDeviceFindByIdResp, error)
	// 根据设备ids查询报警
	UavDeviceFindByIds(context.Context, *UavDeviceFindByIdsReq) (*UavDeviceFindByIdsResp, error)
	mustEmbedUnimplementedUavDeviceServiceServer()
}

// UnimplementedUavDeviceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUavDeviceServiceServer struct {
}

func (UnimplementedUavDeviceServiceServer) UavDeviceAdd(context.Context, *UavDeviceAddReq) (*UavDeviceAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UavDeviceAdd not implemented")
}
func (UnimplementedUavDeviceServiceServer) UavDeviceList(context.Context, *UavDeviceListReq) (*UavDeviceListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UavDeviceList not implemented")
}
func (UnimplementedUavDeviceServiceServer) UavDeviceUpdate(context.Context, *UavDeviceAddReq) (*UavDeviceAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UavDeviceUpdate not implemented")
}
func (UnimplementedUavDeviceServiceServer) UavDeviceFindById(context.Context, *UavDeviceFindByIdReq) (*UavDeviceFindByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UavDeviceFindById not implemented")
}
func (UnimplementedUavDeviceServiceServer) UavDeviceFindByIds(context.Context, *UavDeviceFindByIdsReq) (*UavDeviceFindByIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UavDeviceFindByIds not implemented")
}
func (UnimplementedUavDeviceServiceServer) mustEmbedUnimplementedUavDeviceServiceServer() {}

// UnsafeUavDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UavDeviceServiceServer will
// result in compilation errors.
type UnsafeUavDeviceServiceServer interface {
	mustEmbedUnimplementedUavDeviceServiceServer()
}

func RegisterUavDeviceServiceServer(s grpc.ServiceRegistrar, srv UavDeviceServiceServer) {
	s.RegisterService(&UavDeviceService_ServiceDesc, srv)
}

func _UavDeviceService_UavDeviceAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UavDeviceAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UavDeviceServiceServer).UavDeviceAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UavDeviceService_UavDeviceAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UavDeviceServiceServer).UavDeviceAdd(ctx, req.(*UavDeviceAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UavDeviceService_UavDeviceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UavDeviceListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UavDeviceServiceServer).UavDeviceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UavDeviceService_UavDeviceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UavDeviceServiceServer).UavDeviceList(ctx, req.(*UavDeviceListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UavDeviceService_UavDeviceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UavDeviceAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UavDeviceServiceServer).UavDeviceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UavDeviceService_UavDeviceUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UavDeviceServiceServer).UavDeviceUpdate(ctx, req.(*UavDeviceAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UavDeviceService_UavDeviceFindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UavDeviceFindByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UavDeviceServiceServer).UavDeviceFindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UavDeviceService_UavDeviceFindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UavDeviceServiceServer).UavDeviceFindById(ctx, req.(*UavDeviceFindByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UavDeviceService_UavDeviceFindByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UavDeviceFindByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UavDeviceServiceServer).UavDeviceFindByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UavDeviceService_UavDeviceFindByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UavDeviceServiceServer).UavDeviceFindByIds(ctx, req.(*UavDeviceFindByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UavDeviceService_ServiceDesc is the grpc.ServiceDesc for UavDeviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UavDeviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uavclient.UavDeviceService",
	HandlerType: (*UavDeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UavDeviceAdd",
			Handler:    _UavDeviceService_UavDeviceAdd_Handler,
		},
		{
			MethodName: "UavDeviceList",
			Handler:    _UavDeviceService_UavDeviceList_Handler,
		},
		{
			MethodName: "UavDeviceUpdate",
			Handler:    _UavDeviceService_UavDeviceUpdate_Handler,
		},
		{
			MethodName: "UavDeviceFindById",
			Handler:    _UavDeviceService_UavDeviceFindById_Handler,
		},
		{
			MethodName: "UavDeviceFindByIds",
			Handler:    _UavDeviceService_UavDeviceFindByIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uav.proto",
}

const (
	UavFlyService_UavFlyAdd_FullMethodName      = "/uavclient.UavFlyService/UavFlyAdd"
	UavFlyService_UavFlyList_FullMethodName     = "/uavclient.UavFlyService/UavFlyList"
	UavFlyService_UavFlyUpdate_FullMethodName   = "/uavclient.UavFlyService/UavFlyUpdate"
	UavFlyService_UavFlyFindById_FullMethodName = "/uavclient.UavFlyService/UavFlyFindById"
)

// UavFlyServiceClient is the client API for UavFlyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UavFlyServiceClient interface {
	// 添加设备
	UavFlyAdd(ctx context.Context, in *AddUavFlyReq, opts ...grpc.CallOption) (*UavFlyAddResp, error)
	// 获取设备列表
	UavFlyList(ctx context.Context, in *ListUavFlyReq, opts ...grpc.CallOption) (*ListUavFlyResp, error)
	// 修改设备表
	UavFlyUpdate(ctx context.Context, in *UpdateUavFlyReq, opts ...grpc.CallOption) (*UpdateUavFlyResp, error)
	// 根据设备d查询报警
	UavFlyFindById(ctx context.Context, in *UavFlyFindByIdReq, opts ...grpc.CallOption) (*ListUavFlyResp, error)
}

type uavFlyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUavFlyServiceClient(cc grpc.ClientConnInterface) UavFlyServiceClient {
	return &uavFlyServiceClient{cc}
}

func (c *uavFlyServiceClient) UavFlyAdd(ctx context.Context, in *AddUavFlyReq, opts ...grpc.CallOption) (*UavFlyAddResp, error) {
	out := new(UavFlyAddResp)
	err := c.cc.Invoke(ctx, UavFlyService_UavFlyAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uavFlyServiceClient) UavFlyList(ctx context.Context, in *ListUavFlyReq, opts ...grpc.CallOption) (*ListUavFlyResp, error) {
	out := new(ListUavFlyResp)
	err := c.cc.Invoke(ctx, UavFlyService_UavFlyList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uavFlyServiceClient) UavFlyUpdate(ctx context.Context, in *UpdateUavFlyReq, opts ...grpc.CallOption) (*UpdateUavFlyResp, error) {
	out := new(UpdateUavFlyResp)
	err := c.cc.Invoke(ctx, UavFlyService_UavFlyUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uavFlyServiceClient) UavFlyFindById(ctx context.Context, in *UavFlyFindByIdReq, opts ...grpc.CallOption) (*ListUavFlyResp, error) {
	out := new(ListUavFlyResp)
	err := c.cc.Invoke(ctx, UavFlyService_UavFlyFindById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UavFlyServiceServer is the server API for UavFlyService service.
// All implementations must embed UnimplementedUavFlyServiceServer
// for forward compatibility
type UavFlyServiceServer interface {
	// 添加设备
	UavFlyAdd(context.Context, *AddUavFlyReq) (*UavFlyAddResp, error)
	// 获取设备列表
	UavFlyList(context.Context, *ListUavFlyReq) (*ListUavFlyResp, error)
	// 修改设备表
	UavFlyUpdate(context.Context, *UpdateUavFlyReq) (*UpdateUavFlyResp, error)
	// 根据设备d查询报警
	UavFlyFindById(context.Context, *UavFlyFindByIdReq) (*ListUavFlyResp, error)
	mustEmbedUnimplementedUavFlyServiceServer()
}

// UnimplementedUavFlyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUavFlyServiceServer struct {
}

func (UnimplementedUavFlyServiceServer) UavFlyAdd(context.Context, *AddUavFlyReq) (*UavFlyAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UavFlyAdd not implemented")
}
func (UnimplementedUavFlyServiceServer) UavFlyList(context.Context, *ListUavFlyReq) (*ListUavFlyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UavFlyList not implemented")
}
func (UnimplementedUavFlyServiceServer) UavFlyUpdate(context.Context, *UpdateUavFlyReq) (*UpdateUavFlyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UavFlyUpdate not implemented")
}
func (UnimplementedUavFlyServiceServer) UavFlyFindById(context.Context, *UavFlyFindByIdReq) (*ListUavFlyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UavFlyFindById not implemented")
}
func (UnimplementedUavFlyServiceServer) mustEmbedUnimplementedUavFlyServiceServer() {}

// UnsafeUavFlyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UavFlyServiceServer will
// result in compilation errors.
type UnsafeUavFlyServiceServer interface {
	mustEmbedUnimplementedUavFlyServiceServer()
}

func RegisterUavFlyServiceServer(s grpc.ServiceRegistrar, srv UavFlyServiceServer) {
	s.RegisterService(&UavFlyService_ServiceDesc, srv)
}

func _UavFlyService_UavFlyAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUavFlyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UavFlyServiceServer).UavFlyAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UavFlyService_UavFlyAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UavFlyServiceServer).UavFlyAdd(ctx, req.(*AddUavFlyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UavFlyService_UavFlyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUavFlyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UavFlyServiceServer).UavFlyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UavFlyService_UavFlyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UavFlyServiceServer).UavFlyList(ctx, req.(*ListUavFlyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UavFlyService_UavFlyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUavFlyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UavFlyServiceServer).UavFlyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UavFlyService_UavFlyUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UavFlyServiceServer).UavFlyUpdate(ctx, req.(*UpdateUavFlyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UavFlyService_UavFlyFindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UavFlyFindByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UavFlyServiceServer).UavFlyFindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UavFlyService_UavFlyFindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UavFlyServiceServer).UavFlyFindById(ctx, req.(*UavFlyFindByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UavFlyService_ServiceDesc is the grpc.ServiceDesc for UavFlyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UavFlyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uavclient.UavFlyService",
	HandlerType: (*UavFlyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UavFlyAdd",
			Handler:    _UavFlyService_UavFlyAdd_Handler,
		},
		{
			MethodName: "UavFlyList",
			Handler:    _UavFlyService_UavFlyList_Handler,
		},
		{
			MethodName: "UavFlyUpdate",
			Handler:    _UavFlyService_UavFlyUpdate_Handler,
		},
		{
			MethodName: "UavFlyFindById",
			Handler:    _UavFlyService_UavFlyFindById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uav.proto",
}

const (
	UavHistoryService_UavHistoryAdd_FullMethodName      = "/uavclient.UavHistoryService/UavHistoryAdd"
	UavHistoryService_UavHistoryList_FullMethodName     = "/uavclient.UavHistoryService/UavHistoryList"
	UavHistoryService_UavHistoryUpdate_FullMethodName   = "/uavclient.UavHistoryService/UavHistoryUpdate"
	UavHistoryService_UavHistoryFindById_FullMethodName = "/uavclient.UavHistoryService/UavHistoryFindById"
)

// UavHistoryServiceClient is the client API for UavHistoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UavHistoryServiceClient interface {
	UavHistoryAdd(ctx context.Context, in *AddUavHistoryReq, opts ...grpc.CallOption) (*UavHistoryAddResp, error)
	UavHistoryList(ctx context.Context, in *ListUavHistoryReq, opts ...grpc.CallOption) (*ListUavHistoryResp, error)
	UavHistoryUpdate(ctx context.Context, in *UpdateUavHistoryReq, opts ...grpc.CallOption) (*UpdateUavHistoryResp, error)
	UavHistoryFindById(ctx context.Context, in *UavHistoryFindByIdReq, opts ...grpc.CallOption) (*ListUavHistoryResp, error)
}

type uavHistoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUavHistoryServiceClient(cc grpc.ClientConnInterface) UavHistoryServiceClient {
	return &uavHistoryServiceClient{cc}
}

func (c *uavHistoryServiceClient) UavHistoryAdd(ctx context.Context, in *AddUavHistoryReq, opts ...grpc.CallOption) (*UavHistoryAddResp, error) {
	out := new(UavHistoryAddResp)
	err := c.cc.Invoke(ctx, UavHistoryService_UavHistoryAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uavHistoryServiceClient) UavHistoryList(ctx context.Context, in *ListUavHistoryReq, opts ...grpc.CallOption) (*ListUavHistoryResp, error) {
	out := new(ListUavHistoryResp)
	err := c.cc.Invoke(ctx, UavHistoryService_UavHistoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uavHistoryServiceClient) UavHistoryUpdate(ctx context.Context, in *UpdateUavHistoryReq, opts ...grpc.CallOption) (*UpdateUavHistoryResp, error) {
	out := new(UpdateUavHistoryResp)
	err := c.cc.Invoke(ctx, UavHistoryService_UavHistoryUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uavHistoryServiceClient) UavHistoryFindById(ctx context.Context, in *UavHistoryFindByIdReq, opts ...grpc.CallOption) (*ListUavHistoryResp, error) {
	out := new(ListUavHistoryResp)
	err := c.cc.Invoke(ctx, UavHistoryService_UavHistoryFindById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UavHistoryServiceServer is the server API for UavHistoryService service.
// All implementations must embed UnimplementedUavHistoryServiceServer
// for forward compatibility
type UavHistoryServiceServer interface {
	UavHistoryAdd(context.Context, *AddUavHistoryReq) (*UavHistoryAddResp, error)
	UavHistoryList(context.Context, *ListUavHistoryReq) (*ListUavHistoryResp, error)
	UavHistoryUpdate(context.Context, *UpdateUavHistoryReq) (*UpdateUavHistoryResp, error)
	UavHistoryFindById(context.Context, *UavHistoryFindByIdReq) (*ListUavHistoryResp, error)
	mustEmbedUnimplementedUavHistoryServiceServer()
}

// UnimplementedUavHistoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUavHistoryServiceServer struct {
}

func (UnimplementedUavHistoryServiceServer) UavHistoryAdd(context.Context, *AddUavHistoryReq) (*UavHistoryAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UavHistoryAdd not implemented")
}
func (UnimplementedUavHistoryServiceServer) UavHistoryList(context.Context, *ListUavHistoryReq) (*ListUavHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UavHistoryList not implemented")
}
func (UnimplementedUavHistoryServiceServer) UavHistoryUpdate(context.Context, *UpdateUavHistoryReq) (*UpdateUavHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UavHistoryUpdate not implemented")
}
func (UnimplementedUavHistoryServiceServer) UavHistoryFindById(context.Context, *UavHistoryFindByIdReq) (*ListUavHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UavHistoryFindById not implemented")
}
func (UnimplementedUavHistoryServiceServer) mustEmbedUnimplementedUavHistoryServiceServer() {}

// UnsafeUavHistoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UavHistoryServiceServer will
// result in compilation errors.
type UnsafeUavHistoryServiceServer interface {
	mustEmbedUnimplementedUavHistoryServiceServer()
}

func RegisterUavHistoryServiceServer(s grpc.ServiceRegistrar, srv UavHistoryServiceServer) {
	s.RegisterService(&UavHistoryService_ServiceDesc, srv)
}

func _UavHistoryService_UavHistoryAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUavHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UavHistoryServiceServer).UavHistoryAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UavHistoryService_UavHistoryAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UavHistoryServiceServer).UavHistoryAdd(ctx, req.(*AddUavHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UavHistoryService_UavHistoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUavHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UavHistoryServiceServer).UavHistoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UavHistoryService_UavHistoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UavHistoryServiceServer).UavHistoryList(ctx, req.(*ListUavHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UavHistoryService_UavHistoryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUavHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UavHistoryServiceServer).UavHistoryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UavHistoryService_UavHistoryUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UavHistoryServiceServer).UavHistoryUpdate(ctx, req.(*UpdateUavHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UavHistoryService_UavHistoryFindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UavHistoryFindByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UavHistoryServiceServer).UavHistoryFindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UavHistoryService_UavHistoryFindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UavHistoryServiceServer).UavHistoryFindById(ctx, req.(*UavHistoryFindByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UavHistoryService_ServiceDesc is the grpc.ServiceDesc for UavHistoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UavHistoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uavclient.UavHistoryService",
	HandlerType: (*UavHistoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UavHistoryAdd",
			Handler:    _UavHistoryService_UavHistoryAdd_Handler,
		},
		{
			MethodName: "UavHistoryList",
			Handler:    _UavHistoryService_UavHistoryList_Handler,
		},
		{
			MethodName: "UavHistoryUpdate",
			Handler:    _UavHistoryService_UavHistoryUpdate_Handler,
		},
		{
			MethodName: "UavHistoryFindById",
			Handler:    _UavHistoryService_UavHistoryFindById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uav.proto",
}

const (
	UavNetworkService_UavNetworkAdd_FullMethodName      = "/uavclient.UavNetworkService/UavNetworkAdd"
	UavNetworkService_UavNetworkList_FullMethodName     = "/uavclient.UavNetworkService/UavNetworkList"
	UavNetworkService_UavNetworkUpdate_FullMethodName   = "/uavclient.UavNetworkService/UavNetworkUpdate"
	UavNetworkService_UavNetworkFindById_FullMethodName = "/uavclient.UavNetworkService/UavNetworkFindById"
)

// UavNetworkServiceClient is the client API for UavNetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UavNetworkServiceClient interface {
	UavNetworkAdd(ctx context.Context, in *AddUavNetworkReq, opts ...grpc.CallOption) (*UavNetworkAddResp, error)
	UavNetworkList(ctx context.Context, in *ListUavNetworkReq, opts ...grpc.CallOption) (*ListUavNetworkResp, error)
	UavNetworkUpdate(ctx context.Context, in *UpdateUavNetworkReq, opts ...grpc.CallOption) (*UpdateUavNetworkResp, error)
	UavNetworkFindById(ctx context.Context, in *UavNetworkFindByIdReq, opts ...grpc.CallOption) (*ListUavNetworkResp, error)
}

type uavNetworkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUavNetworkServiceClient(cc grpc.ClientConnInterface) UavNetworkServiceClient {
	return &uavNetworkServiceClient{cc}
}

func (c *uavNetworkServiceClient) UavNetworkAdd(ctx context.Context, in *AddUavNetworkReq, opts ...grpc.CallOption) (*UavNetworkAddResp, error) {
	out := new(UavNetworkAddResp)
	err := c.cc.Invoke(ctx, UavNetworkService_UavNetworkAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uavNetworkServiceClient) UavNetworkList(ctx context.Context, in *ListUavNetworkReq, opts ...grpc.CallOption) (*ListUavNetworkResp, error) {
	out := new(ListUavNetworkResp)
	err := c.cc.Invoke(ctx, UavNetworkService_UavNetworkList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uavNetworkServiceClient) UavNetworkUpdate(ctx context.Context, in *UpdateUavNetworkReq, opts ...grpc.CallOption) (*UpdateUavNetworkResp, error) {
	out := new(UpdateUavNetworkResp)
	err := c.cc.Invoke(ctx, UavNetworkService_UavNetworkUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uavNetworkServiceClient) UavNetworkFindById(ctx context.Context, in *UavNetworkFindByIdReq, opts ...grpc.CallOption) (*ListUavNetworkResp, error) {
	out := new(ListUavNetworkResp)
	err := c.cc.Invoke(ctx, UavNetworkService_UavNetworkFindById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UavNetworkServiceServer is the server API for UavNetworkService service.
// All implementations must embed UnimplementedUavNetworkServiceServer
// for forward compatibility
type UavNetworkServiceServer interface {
	UavNetworkAdd(context.Context, *AddUavNetworkReq) (*UavNetworkAddResp, error)
	UavNetworkList(context.Context, *ListUavNetworkReq) (*ListUavNetworkResp, error)
	UavNetworkUpdate(context.Context, *UpdateUavNetworkReq) (*UpdateUavNetworkResp, error)
	UavNetworkFindById(context.Context, *UavNetworkFindByIdReq) (*ListUavNetworkResp, error)
	mustEmbedUnimplementedUavNetworkServiceServer()
}

// UnimplementedUavNetworkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUavNetworkServiceServer struct {
}

func (UnimplementedUavNetworkServiceServer) UavNetworkAdd(context.Context, *AddUavNetworkReq) (*UavNetworkAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UavNetworkAdd not implemented")
}
func (UnimplementedUavNetworkServiceServer) UavNetworkList(context.Context, *ListUavNetworkReq) (*ListUavNetworkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UavNetworkList not implemented")
}
func (UnimplementedUavNetworkServiceServer) UavNetworkUpdate(context.Context, *UpdateUavNetworkReq) (*UpdateUavNetworkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UavNetworkUpdate not implemented")
}
func (UnimplementedUavNetworkServiceServer) UavNetworkFindById(context.Context, *UavNetworkFindByIdReq) (*ListUavNetworkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UavNetworkFindById not implemented")
}
func (UnimplementedUavNetworkServiceServer) mustEmbedUnimplementedUavNetworkServiceServer() {}

// UnsafeUavNetworkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UavNetworkServiceServer will
// result in compilation errors.
type UnsafeUavNetworkServiceServer interface {
	mustEmbedUnimplementedUavNetworkServiceServer()
}

func RegisterUavNetworkServiceServer(s grpc.ServiceRegistrar, srv UavNetworkServiceServer) {
	s.RegisterService(&UavNetworkService_ServiceDesc, srv)
}

func _UavNetworkService_UavNetworkAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUavNetworkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UavNetworkServiceServer).UavNetworkAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UavNetworkService_UavNetworkAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UavNetworkServiceServer).UavNetworkAdd(ctx, req.(*AddUavNetworkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UavNetworkService_UavNetworkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUavNetworkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UavNetworkServiceServer).UavNetworkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UavNetworkService_UavNetworkList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UavNetworkServiceServer).UavNetworkList(ctx, req.(*ListUavNetworkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UavNetworkService_UavNetworkUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUavNetworkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UavNetworkServiceServer).UavNetworkUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UavNetworkService_UavNetworkUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UavNetworkServiceServer).UavNetworkUpdate(ctx, req.(*UpdateUavNetworkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UavNetworkService_UavNetworkFindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UavNetworkFindByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UavNetworkServiceServer).UavNetworkFindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UavNetworkService_UavNetworkFindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UavNetworkServiceServer).UavNetworkFindById(ctx, req.(*UavNetworkFindByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UavNetworkService_ServiceDesc is the grpc.ServiceDesc for UavNetworkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UavNetworkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uavclient.UavNetworkService",
	HandlerType: (*UavNetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UavNetworkAdd",
			Handler:    _UavNetworkService_UavNetworkAdd_Handler,
		},
		{
			MethodName: "UavNetworkList",
			Handler:    _UavNetworkService_UavNetworkList_Handler,
		},
		{
			MethodName: "UavNetworkUpdate",
			Handler:    _UavNetworkService_UavNetworkUpdate_Handler,
		},
		{
			MethodName: "UavNetworkFindById",
			Handler:    _UavNetworkService_UavNetworkFindById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uav.proto",
}

const (
	UavPeopleService_UavPeopleAdd_FullMethodName      = "/uavclient.UavPeopleService/UavPeopleAdd"
	UavPeopleService_UavPeopleList_FullMethodName     = "/uavclient.UavPeopleService/UavPeopleList"
	UavPeopleService_UavPeopleUpdate_FullMethodName   = "/uavclient.UavPeopleService/UavPeopleUpdate"
	UavPeopleService_UavPeopleFindById_FullMethodName = "/uavclient.UavPeopleService/UavPeopleFindById"
)

// UavPeopleServiceClient is the client API for UavPeopleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UavPeopleServiceClient interface {
	UavPeopleAdd(ctx context.Context, in *AddUavPeopleReq, opts ...grpc.CallOption) (*UavPeopleAddResp, error)
	UavPeopleList(ctx context.Context, in *ListUavPeopleReq, opts ...grpc.CallOption) (*ListUavPeopleResp, error)
	UavPeopleUpdate(ctx context.Context, in *UpdateUavPeopleReq, opts ...grpc.CallOption) (*UpdateUavPeopleResp, error)
	UavPeopleFindById(ctx context.Context, in *UavPeopleFindByIdReq, opts ...grpc.CallOption) (*ListUavPeopleResp, error)
}

type uavPeopleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUavPeopleServiceClient(cc grpc.ClientConnInterface) UavPeopleServiceClient {
	return &uavPeopleServiceClient{cc}
}

func (c *uavPeopleServiceClient) UavPeopleAdd(ctx context.Context, in *AddUavPeopleReq, opts ...grpc.CallOption) (*UavPeopleAddResp, error) {
	out := new(UavPeopleAddResp)
	err := c.cc.Invoke(ctx, UavPeopleService_UavPeopleAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uavPeopleServiceClient) UavPeopleList(ctx context.Context, in *ListUavPeopleReq, opts ...grpc.CallOption) (*ListUavPeopleResp, error) {
	out := new(ListUavPeopleResp)
	err := c.cc.Invoke(ctx, UavPeopleService_UavPeopleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uavPeopleServiceClient) UavPeopleUpdate(ctx context.Context, in *UpdateUavPeopleReq, opts ...grpc.CallOption) (*UpdateUavPeopleResp, error) {
	out := new(UpdateUavPeopleResp)
	err := c.cc.Invoke(ctx, UavPeopleService_UavPeopleUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uavPeopleServiceClient) UavPeopleFindById(ctx context.Context, in *UavPeopleFindByIdReq, opts ...grpc.CallOption) (*ListUavPeopleResp, error) {
	out := new(ListUavPeopleResp)
	err := c.cc.Invoke(ctx, UavPeopleService_UavPeopleFindById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UavPeopleServiceServer is the server API for UavPeopleService service.
// All implementations must embed UnimplementedUavPeopleServiceServer
// for forward compatibility
type UavPeopleServiceServer interface {
	UavPeopleAdd(context.Context, *AddUavPeopleReq) (*UavPeopleAddResp, error)
	UavPeopleList(context.Context, *ListUavPeopleReq) (*ListUavPeopleResp, error)
	UavPeopleUpdate(context.Context, *UpdateUavPeopleReq) (*UpdateUavPeopleResp, error)
	UavPeopleFindById(context.Context, *UavPeopleFindByIdReq) (*ListUavPeopleResp, error)
	mustEmbedUnimplementedUavPeopleServiceServer()
}

// UnimplementedUavPeopleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUavPeopleServiceServer struct {
}

func (UnimplementedUavPeopleServiceServer) UavPeopleAdd(context.Context, *AddUavPeopleReq) (*UavPeopleAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UavPeopleAdd not implemented")
}
func (UnimplementedUavPeopleServiceServer) UavPeopleList(context.Context, *ListUavPeopleReq) (*ListUavPeopleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UavPeopleList not implemented")
}
func (UnimplementedUavPeopleServiceServer) UavPeopleUpdate(context.Context, *UpdateUavPeopleReq) (*UpdateUavPeopleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UavPeopleUpdate not implemented")
}
func (UnimplementedUavPeopleServiceServer) UavPeopleFindById(context.Context, *UavPeopleFindByIdReq) (*ListUavPeopleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UavPeopleFindById not implemented")
}
func (UnimplementedUavPeopleServiceServer) mustEmbedUnimplementedUavPeopleServiceServer() {}

// UnsafeUavPeopleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UavPeopleServiceServer will
// result in compilation errors.
type UnsafeUavPeopleServiceServer interface {
	mustEmbedUnimplementedUavPeopleServiceServer()
}

func RegisterUavPeopleServiceServer(s grpc.ServiceRegistrar, srv UavPeopleServiceServer) {
	s.RegisterService(&UavPeopleService_ServiceDesc, srv)
}

func _UavPeopleService_UavPeopleAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUavPeopleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UavPeopleServiceServer).UavPeopleAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UavPeopleService_UavPeopleAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UavPeopleServiceServer).UavPeopleAdd(ctx, req.(*AddUavPeopleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UavPeopleService_UavPeopleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUavPeopleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UavPeopleServiceServer).UavPeopleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UavPeopleService_UavPeopleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UavPeopleServiceServer).UavPeopleList(ctx, req.(*ListUavPeopleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UavPeopleService_UavPeopleUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUavPeopleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UavPeopleServiceServer).UavPeopleUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UavPeopleService_UavPeopleUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UavPeopleServiceServer).UavPeopleUpdate(ctx, req.(*UpdateUavPeopleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UavPeopleService_UavPeopleFindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UavPeopleFindByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UavPeopleServiceServer).UavPeopleFindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UavPeopleService_UavPeopleFindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UavPeopleServiceServer).UavPeopleFindById(ctx, req.(*UavPeopleFindByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UavPeopleService_ServiceDesc is the grpc.ServiceDesc for UavPeopleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UavPeopleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uavclient.UavPeopleService",
	HandlerType: (*UavPeopleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UavPeopleAdd",
			Handler:    _UavPeopleService_UavPeopleAdd_Handler,
		},
		{
			MethodName: "UavPeopleList",
			Handler:    _UavPeopleService_UavPeopleList_Handler,
		},
		{
			MethodName: "UavPeopleUpdate",
			Handler:    _UavPeopleService_UavPeopleUpdate_Handler,
		},
		{
			MethodName: "UavPeopleFindById",
			Handler:    _UavPeopleService_UavPeopleFindById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uav.proto",
}

const (
	UavPlanService_UavPlanAdd_FullMethodName      = "/uavclient.UavPlanService/UavPlanAdd"
	UavPlanService_UavPlanList_FullMethodName     = "/uavclient.UavPlanService/UavPlanList"
	UavPlanService_UavPlanUpdate_FullMethodName   = "/uavclient.UavPlanService/UavPlanUpdate"
	UavPlanService_UavPlanFindById_FullMethodName = "/uavclient.UavPlanService/UavPlanFindById"
)

// UavPlanServiceClient is the client API for UavPlanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UavPlanServiceClient interface {
	UavPlanAdd(ctx context.Context, in *AddUavPlanReq, opts ...grpc.CallOption) (*UavPlanAddResp, error)
	UavPlanList(ctx context.Context, in *ListUavPlanReq, opts ...grpc.CallOption) (*ListUavPlanResp, error)
	UavPlanUpdate(ctx context.Context, in *UpdateUavPlanReq, opts ...grpc.CallOption) (*UpdateUavPlanResp, error)
	UavPlanFindById(ctx context.Context, in *UavPlanFindByIdReq, opts ...grpc.CallOption) (*ListUavPlanResp, error)
}

type uavPlanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUavPlanServiceClient(cc grpc.ClientConnInterface) UavPlanServiceClient {
	return &uavPlanServiceClient{cc}
}

func (c *uavPlanServiceClient) UavPlanAdd(ctx context.Context, in *AddUavPlanReq, opts ...grpc.CallOption) (*UavPlanAddResp, error) {
	out := new(UavPlanAddResp)
	err := c.cc.Invoke(ctx, UavPlanService_UavPlanAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uavPlanServiceClient) UavPlanList(ctx context.Context, in *ListUavPlanReq, opts ...grpc.CallOption) (*ListUavPlanResp, error) {
	out := new(ListUavPlanResp)
	err := c.cc.Invoke(ctx, UavPlanService_UavPlanList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uavPlanServiceClient) UavPlanUpdate(ctx context.Context, in *UpdateUavPlanReq, opts ...grpc.CallOption) (*UpdateUavPlanResp, error) {
	out := new(UpdateUavPlanResp)
	err := c.cc.Invoke(ctx, UavPlanService_UavPlanUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uavPlanServiceClient) UavPlanFindById(ctx context.Context, in *UavPlanFindByIdReq, opts ...grpc.CallOption) (*ListUavPlanResp, error) {
	out := new(ListUavPlanResp)
	err := c.cc.Invoke(ctx, UavPlanService_UavPlanFindById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UavPlanServiceServer is the server API for UavPlanService service.
// All implementations must embed UnimplementedUavPlanServiceServer
// for forward compatibility
type UavPlanServiceServer interface {
	UavPlanAdd(context.Context, *AddUavPlanReq) (*UavPlanAddResp, error)
	UavPlanList(context.Context, *ListUavPlanReq) (*ListUavPlanResp, error)
	UavPlanUpdate(context.Context, *UpdateUavPlanReq) (*UpdateUavPlanResp, error)
	UavPlanFindById(context.Context, *UavPlanFindByIdReq) (*ListUavPlanResp, error)
	mustEmbedUnimplementedUavPlanServiceServer()
}

// UnimplementedUavPlanServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUavPlanServiceServer struct {
}

func (UnimplementedUavPlanServiceServer) UavPlanAdd(context.Context, *AddUavPlanReq) (*UavPlanAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UavPlanAdd not implemented")
}
func (UnimplementedUavPlanServiceServer) UavPlanList(context.Context, *ListUavPlanReq) (*ListUavPlanResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UavPlanList not implemented")
}
func (UnimplementedUavPlanServiceServer) UavPlanUpdate(context.Context, *UpdateUavPlanReq) (*UpdateUavPlanResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UavPlanUpdate not implemented")
}
func (UnimplementedUavPlanServiceServer) UavPlanFindById(context.Context, *UavPlanFindByIdReq) (*ListUavPlanResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UavPlanFindById not implemented")
}
func (UnimplementedUavPlanServiceServer) mustEmbedUnimplementedUavPlanServiceServer() {}

// UnsafeUavPlanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UavPlanServiceServer will
// result in compilation errors.
type UnsafeUavPlanServiceServer interface {
	mustEmbedUnimplementedUavPlanServiceServer()
}

func RegisterUavPlanServiceServer(s grpc.ServiceRegistrar, srv UavPlanServiceServer) {
	s.RegisterService(&UavPlanService_ServiceDesc, srv)
}

func _UavPlanService_UavPlanAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUavPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UavPlanServiceServer).UavPlanAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UavPlanService_UavPlanAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UavPlanServiceServer).UavPlanAdd(ctx, req.(*AddUavPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UavPlanService_UavPlanList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUavPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UavPlanServiceServer).UavPlanList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UavPlanService_UavPlanList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UavPlanServiceServer).UavPlanList(ctx, req.(*ListUavPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UavPlanService_UavPlanUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUavPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UavPlanServiceServer).UavPlanUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UavPlanService_UavPlanUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UavPlanServiceServer).UavPlanUpdate(ctx, req.(*UpdateUavPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UavPlanService_UavPlanFindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UavPlanFindByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UavPlanServiceServer).UavPlanFindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UavPlanService_UavPlanFindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UavPlanServiceServer).UavPlanFindById(ctx, req.(*UavPlanFindByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UavPlanService_ServiceDesc is the grpc.ServiceDesc for UavPlanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UavPlanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uavclient.UavPlanService",
	HandlerType: (*UavPlanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UavPlanAdd",
			Handler:    _UavPlanService_UavPlanAdd_Handler,
		},
		{
			MethodName: "UavPlanList",
			Handler:    _UavPlanService_UavPlanList_Handler,
		},
		{
			MethodName: "UavPlanUpdate",
			Handler:    _UavPlanService_UavPlanUpdate_Handler,
		},
		{
			MethodName: "UavPlanFindById",
			Handler:    _UavPlanService_UavPlanFindById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uav.proto",
}

const (
	UavMMQService_UavMMQList_FullMethodName        = "/uavclient.UavMMQService/UavMMQList"
	UavMMQService_UavMMQConfirmById_FullMethodName = "/uavclient.UavMMQService/UavMMQConfirmById"
	UavMMQService_UavMMQFindByIds_FullMethodName   = "/uavclient.UavMMQService/UavMMQFindByIds"
)

// UavMMQServiceClient is the client API for UavMMQService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UavMMQServiceClient interface {
	// 获取消息列表
	UavMMQList(ctx context.Context, in *UavMMQListReq, opts ...grpc.CallOption) (*UavMMQListResp, error)
	// 根据设备d查询报警
	UavMMQConfirmById(ctx context.Context, in *UavMMQFindByIdReq, opts ...grpc.CallOption) (*UavMMQFindByIdResp, error)
	// 根据设备ids查询报警
	UavMMQFindByIds(ctx context.Context, in *UavMMQFindByIdsReq, opts ...grpc.CallOption) (*UavMMQFindByIdsResp, error)
}

type uavMMQServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUavMMQServiceClient(cc grpc.ClientConnInterface) UavMMQServiceClient {
	return &uavMMQServiceClient{cc}
}

func (c *uavMMQServiceClient) UavMMQList(ctx context.Context, in *UavMMQListReq, opts ...grpc.CallOption) (*UavMMQListResp, error) {
	out := new(UavMMQListResp)
	err := c.cc.Invoke(ctx, UavMMQService_UavMMQList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uavMMQServiceClient) UavMMQConfirmById(ctx context.Context, in *UavMMQFindByIdReq, opts ...grpc.CallOption) (*UavMMQFindByIdResp, error) {
	out := new(UavMMQFindByIdResp)
	err := c.cc.Invoke(ctx, UavMMQService_UavMMQConfirmById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uavMMQServiceClient) UavMMQFindByIds(ctx context.Context, in *UavMMQFindByIdsReq, opts ...grpc.CallOption) (*UavMMQFindByIdsResp, error) {
	out := new(UavMMQFindByIdsResp)
	err := c.cc.Invoke(ctx, UavMMQService_UavMMQFindByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UavMMQServiceServer is the server API for UavMMQService service.
// All implementations must embed UnimplementedUavMMQServiceServer
// for forward compatibility
type UavMMQServiceServer interface {
	// 获取消息列表
	UavMMQList(context.Context, *UavMMQListReq) (*UavMMQListResp, error)
	// 根据设备d查询报警
	UavMMQConfirmById(context.Context, *UavMMQFindByIdReq) (*UavMMQFindByIdResp, error)
	// 根据设备ids查询报警
	UavMMQFindByIds(context.Context, *UavMMQFindByIdsReq) (*UavMMQFindByIdsResp, error)
	mustEmbedUnimplementedUavMMQServiceServer()
}

// UnimplementedUavMMQServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUavMMQServiceServer struct {
}

func (UnimplementedUavMMQServiceServer) UavMMQList(context.Context, *UavMMQListReq) (*UavMMQListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UavMMQList not implemented")
}
func (UnimplementedUavMMQServiceServer) UavMMQConfirmById(context.Context, *UavMMQFindByIdReq) (*UavMMQFindByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UavMMQConfirmById not implemented")
}
func (UnimplementedUavMMQServiceServer) UavMMQFindByIds(context.Context, *UavMMQFindByIdsReq) (*UavMMQFindByIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UavMMQFindByIds not implemented")
}
func (UnimplementedUavMMQServiceServer) mustEmbedUnimplementedUavMMQServiceServer() {}

// UnsafeUavMMQServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UavMMQServiceServer will
// result in compilation errors.
type UnsafeUavMMQServiceServer interface {
	mustEmbedUnimplementedUavMMQServiceServer()
}

func RegisterUavMMQServiceServer(s grpc.ServiceRegistrar, srv UavMMQServiceServer) {
	s.RegisterService(&UavMMQService_ServiceDesc, srv)
}

func _UavMMQService_UavMMQList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UavMMQListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UavMMQServiceServer).UavMMQList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UavMMQService_UavMMQList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UavMMQServiceServer).UavMMQList(ctx, req.(*UavMMQListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UavMMQService_UavMMQConfirmById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UavMMQFindByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UavMMQServiceServer).UavMMQConfirmById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UavMMQService_UavMMQConfirmById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UavMMQServiceServer).UavMMQConfirmById(ctx, req.(*UavMMQFindByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UavMMQService_UavMMQFindByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UavMMQFindByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UavMMQServiceServer).UavMMQFindByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UavMMQService_UavMMQFindByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UavMMQServiceServer).UavMMQFindByIds(ctx, req.(*UavMMQFindByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UavMMQService_ServiceDesc is the grpc.ServiceDesc for UavMMQService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UavMMQService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uavclient.UavMMQService",
	HandlerType: (*UavMMQServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UavMMQList",
			Handler:    _UavMMQService_UavMMQList_Handler,
		},
		{
			MethodName: "UavMMQConfirmById",
			Handler:    _UavMMQService_UavMMQConfirmById_Handler,
		},
		{
			MethodName: "UavMMQFindByIds",
			Handler:    _UavMMQService_UavMMQFindByIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uav.proto",
}
